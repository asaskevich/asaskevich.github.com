<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Some Useful Notes]]></title>
  <subtitle><![CDATA[Short notes from Alex Saskevich]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://asaskevich.github.io/"/>
  <updated>2016-01-16T16:43:57.062Z</updated>
  <id>http://asaskevich.github.io/</id>
  
  <author>
    <name><![CDATA[Alex Saskevich]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[React — first impressions from the noob]]></title>
    <link href="http://asaskevich.github.io/2015/08/13/React-%E2%80%94-first-impressions-from-the-noob/"/>
    <id>http://asaskevich.github.io/2015/08/13/React-—-first-impressions-from-the-noob/</id>
    <published>2015-08-13T16:24:43.000Z</published>
    <updated>2016-01-16T16:43:57.062Z</updated>
    <content type="html"><![CDATA[<p><img src="https://medium2.global.ssl.fastly.net/max/3200/1*fUFPeaJPBnDPtujMB6s65Q.png" alt="React.js"></p>
<p><strong><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> is the one of most famous JavaScript-frameworks. A lot of developers uses it in everyday development. Since its release, I saw a lot of different posts and articles about it. Different people leave theirs reviews and impressions. So, I tried to learn this framework and give to it some respect or discontent. In this article, I’ll look at React as a noob because I really the noob and doesn’t know this framework. You can say “Yet another article about React”, but it’s not. Let’s go!</strong></p>
<a id="more"></a>
<p>Firstly, React is different from others frameworks like <a href="https://angularjs.org/" target="_blank" rel="external">Angular</a> or <a href="http://backbonejs.org/" target="_blank" rel="external">Backbone</a>. It has its ideology, idea and style of development. Great example — mixing JavaScript and HTML markup inside one source file. Do you know others examples with this innovation? I’m not. React uses a brand new architecture — <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> which consists of following components — action, dispatcher, store and controller view. Do you remember that I’m the novice (yeah, noob) in React so I’ll dive into Flux soon.</p>
<p>The major advantage of the framework is the <em>virtual DOM</em>. Oops, I didn’t say — React is not MVC framework, the React is UI framework. Briefly, it’s use fake DOM that will be rendered only if you change something in your object (DOM element, view, component etc). I’ll show it in an example below. Virtual DOM makes React very fast and reactive, different benchmarks proves it.</p>
<p>Okay, it was the preface and now we can to start working with <em>“Hello World”</em>.</p>
<p>What do you need when working with React? You can start with this little <a href="http://facebook.github.io/react/downloads/react-0.11.2.zip" target="_blank" rel="external">starter kit</a> or this <a href="http://jsfiddle.net/vjeux/kb3gN/" target="_blank" rel="external">JSFiddle</a>. It contains JSX transformer that can help you turn JSX into valid JavaScript that can be used everywhere.</p>
<p>I created this HTML file and include all necessary scripts:</p>
<figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/JSXTransformer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/jsx"</span>&gt;</span><span class="actionscript"></span><br><span class="line">      <span class="comment">// React Code Goes Here</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>As you can see, the file has a script section with type “<em>text/jsx</em>”, so we can write all code here.</p>
<p>At first step, we should render “Hello World” in our HTML:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/jsx"</span>&gt;</span><br><span class="line">    <span class="comment">/** @jsx React.DOM */</span></span><br><span class="line">    React.render(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,</span><br><span class="line">        document.body // or even document.getElementById('my-react-div')</span><br><span class="line">    );</span><br><span class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>It’s easy, isn’t it?</p>
<p>If you would like clear JavaScript way, you can:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">React.render(</span><br><span class="line">  React.DOM.h1(<span class="literal">null</span>, <span class="string">'Hello, world!'</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>But this way is not perfect as the JSX :)</p>
<p><code>&lt;h1&gt;</code> is the built-in component. Base (or backbone) of the React is the components — headers, widgets, blocks etc. We can easily create own component:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>And now we can use this component:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">React.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">MyComponent</span>/&gt;</span>,</span><br><span class="line">    document.body</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>Cool, really cool!</p>
<p>Every component can have own state — it’s like a model for view in MVC. And here (I already said about it) every change of state cause re-render of the component and virtual DOM goes to real DOM:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We can update state with <code>setState()</code> function:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            text: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;text: ev.target.value&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">'text'</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.update&#125;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Result: &#123;this.state.text&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Note, that in the example above I wrapped elements into <code>div</code> block and use events. Events create something like two-way data binding. List of supported events you can read <a href="https://facebook.github.io/react/docs/events.html" target="_blank" rel="external">here</a>.</p>
<p>Instead of <code>states</code> you can use <code>props</code> and pass some data into component outside itself:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Prop: &#123;this.props.value&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="title">MyComponent</span> <span class="attribute">value</span>=<span class="value">'this is prop'</span>/&gt;</span>, document.body);</span></span><br></pre></td></tr></table></figure>
<p>Not sure that I should go deeper because it’s just review from the developer who never working with React.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>React is great, although it’s UI framework, it can give huge abilities for a developer (fake DOM, components etc). React can work both on server and client, so you can preprocess JSX on server and then to give ready-to-work JavaScript to client.</p>
<p>In one evening, I’ve created a small project that can manage accounts, show them in list, filter and insert them (but it’s looking too ugly so I can’t show result here). It was just one hundred lines of code and I spent about four or five hours learning the framework. When I started to reading about React, I was fully zero. I’ve reading a couple of tutorials and watched screencasts before I started to understand it (it all happened in one evening). Now I can work with it, maybe as a noob or novice, but I can.</p>
<p>You can say that this article is not professional and you will be right. Every developer, good developer or not, should study new things, and they should share their knowledge between each other. New knowledge gives new opportunities and lets brain thinking brand new way.</p>
<p>Originally, post was published at <a href="https://medium.com/@asaskevich/react-first-impressions-of-the-noob-1a59380eab15#.dpzc4mkdx" target="_blank" rel="external">Medium</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://medium2.global.ssl.fastly.net/max/3200/1*fUFPeaJPBnDPtujMB6s65Q.png" alt="React.js"></p>
<p><strong><a href="http://facebook.github.io/react/">React</a> is the one of most famous JavaScript-frameworks. A lot of developers uses it in everyday development. Since its release, I saw a lot of different posts and articles about it. Different people leave theirs reviews and impressions. So, I tried to learn this framework and give to it some respect or discontent. In this article, I’ll look at React as a noob because I really the noob and doesn’t know this framework. You can say “Yet another article about React”, but it’s not. Let’s go!</strong></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="React" scheme="http://asaskevich.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How does Chrome executes scripts inside Developer Tool]]></title>
    <link href="http://asaskevich.github.io/2015/07/12/How-does-Chrome-executes-scripts-inside-Developer-Tool/"/>
    <id>http://asaskevich.github.io/2015/07/12/How-does-Chrome-executes-scripts-inside-Developer-Tool/</id>
    <published>2015-07-12T16:12:57.000Z</published>
    <updated>2016-01-16T16:20:04.647Z</updated>
    <content type="html"><![CDATA[<p>Recently, working with Chrome Developer Tool, I found strange thing, which at first was interpreted by me as a bug.<br>I wrote some code with pair of opening-closing brackets, like this “}{“ and I tried to execute it. Surprisingly, but it does not produce me any error. I was amazed…<br><a id="more"></a></p>
<p>I tried to execute another examples:<br><figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#125;&#123;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">&#125;+<span class="number">1</span>-&#123;</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line">&#125;+<span class="string">"a"</span>-&#123;</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line">&#125;<span class="keyword">var</span> a = <span class="number">10</span>;&#123;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">&#125;&#123;&#125;&#123;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">&#125;<span class="built_in">console</span>.log(<span class="string">'yay!'</span>);&#123;</span><br><span class="line"><span class="comment">// yay!</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p>
<p>Okay, it seems fantastic, because it’s not valid JavaScript expression. Let’s look deeper. I’ve put “<code>console.trace()</code>” in executed expressions and tried to figure out how it works:</p>
<figure class="highlight"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(anonymous function)&#9;@&#9;VM336:2&#10;InjectedScript._evaluateOn&#9;@&#9;VM118:895&#10;InjectedScript._evaluateAndWrap&#9;@&#9;VM118:828&#10;InjectedScript.evaluate&#9;@&#9;VM118:694</span><br></pre></td></tr></table></figure>
<p>Now we can go through every stack trace item. First, “<code>(anonymous function) @ VM336:2</code>”. This call on the top of the stack trace that has following code:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> (<span class="keyword">typeof</span> __commandLineAPI !== <span class="string">'undefined'</span> ? __commandLineAPI : &#123; __proto__: <span class="literal">null</span> &#125;) &#123;</span><br><span class="line">  <span class="built_in">console</span>.trace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As we can see, Chrome wraps executed script. He does it because:</p>
<blockquote>
<p>Only install command line api object for the time of evaluation. Surround the expression in with statements to inject our command line API so that the window object properties still take more precedent than our API functions.</p>
</blockquote>
<p>Wrapping occurs on the next function call of the stack trace — on “<code>InjectedScript._evaluateOn @ VM118:895</code>”.</p>
<p>If we will take a look on the last two functions, we’ll find that they do “wrapping-result-exceptions” operations:</p>
<figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .. some code</span></span><br><span class="line">evaluate: <span class="function"><span class="keyword">function</span>(<span class="params">expression, objectGroup, injectCommandLineAPI, returnByValue, generatePreview</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._evaluateAndWrap(<span class="literal">null</span>, expression, objectGroup, injectCommandLineAPI, returnByValue, generatePreview);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// .. some code</span></span><br><span class="line">_evaluateAndWrap: <span class="function"><span class="keyword">function</span>(<span class="params">callFrame, expression, objectGroup, injectCommandLineAPI, returnByValue, generatePreview, scopeChain</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wrappedResult = <span class="keyword">this</span>._evaluateOn(callFrame, objectGroup, expression, injectCommandLineAPI, scopeChain);</span><br><span class="line">    <span class="keyword">if</span> (!wrappedResult.exceptionDetails) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; wasThrown: <span class="literal">false</span>,</span><br><span class="line">                 result: <span class="keyword">this</span>._wrapObject(wrappedResult.result, objectGroup, returnByValue, generatePreview),</span><br><span class="line">                 __proto__: <span class="literal">null</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._createThrownValue(wrappedResult.result, objectGroup, generatePreview, wrappedResult.exceptionDetails);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// .. code</span></span><br></pre></td></tr></table></figure>
<p>After it we can a little better understand what happening inside this useful and necessary in development process tool.</p>
<p>Originally, post was published at <a href="https://medium.com/@asaskevich/how-does-chrome-executes-scripts-inside-developer-tool-59a5ea8f7de2#.yxabxzkke" target="_blank" rel="external">Medium</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently, working with Chrome Developer Tool, I found strange thing, which at first was interpreted by me as a bug.<br>I wrote some code with pair of opening-closing brackets, like this “}{“ and I tried to execute it. Surprisingly, but it does not produce me any error. I was amazed…<br>]]>
    
    </summary>
    
      <category term="Chrome" scheme="http://asaskevich.github.io/tags/Chrome/"/>
    
      <category term="Developer Tools" scheme="http://asaskevich.github.io/tags/Developer-Tools/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[localForage – храним данные offline без головной боли. Удобная абстракция над IndexedDB]]></title>
    <link href="http://asaskevich.github.io/2015/04/21/localforage-khranim-dannyie-offline-biez-gholovnoi-boli-udobnaia-abstraktsiia-nad-indexeddb/"/>
    <id>http://asaskevich.github.io/2015/04/21/localforage-khranim-dannyie-offline-biez-gholovnoi-boli-udobnaia-abstraktsiia-nad-indexeddb/</id>
    <published>2015-04-21T19:48:38.000Z</published>
    <updated>2016-01-16T16:04:40.503Z</updated>
    <content type="html"><![CDATA[<p>Большинство современных веб-приложений каким-либо образом хранят отдельные данные у клиента, пользуясь такими средствами как localStorage, WebSQL или IndexedDB. Так, например, для небольших HTML5-игр весьма удобно хранить результаты игрока локально - не нужно писать взаимодействие с базами данных, а сохранив все локально, игрок легко может продолжить прогресс с места своего сохранения.<br>Однако несмотря на удобство, возникает проблема - хранилища реализуют схожий функционал, однако методы,предлагаемые API, весьма различаются. Это создает проблемы конечному разработчику, который вынужден держать в голове список всех функций,их аргументов и т.д. Помимо этого каждое хранилище имеет свои достоинства и недостатки, что также сказывается на разработке. По этой причине Mozilla представила свою библиотеку <a href="http://mozilla.github.io/localForage/" target="_blank" rel="external">localForage</a>, позволяющую забыть о таких мелочах и сосредоточиться на реализации функционала. Рассмотрим ее возможности подробнее.<br><a id="more"></a></p>
<h4 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h4><p>localForage может быть установлен двумя способами - при помощи bower либо напрямую, скачав непосредственно минифицированную версию скрипта:<br><figure class="highlight cpp"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install localforage</span><br></pre></td></tr></table></figure></p>
<h4 id="u0420_u0430_u0431_u043E_u0442_u0430__u0441__u0434_u0430_u043D_u043D_u044B_u043C_u0438"><a href="#u0420_u0430_u0431_u043E_u0442_u0430__u0441__u0434_u0430_u043D_u043D_u044B_u043C_u0438" class="headerlink" title="Работа с данными"></a>Работа с данными</h4><p>Вообще говоря, localForage позволяет хранить данные любого типа, будь то строки, числа, массивы, либо бинарные объекты. Список хранимых типов представлен ниже:</p>
<ul>
<li>Array</li>
<li>ArrayBuffer</li>
<li>Blob</li>
<li>Float32Array</li>
<li>Float64Array</li>
<li>Int8Array</li>
<li>Int16Array</li>
<li>Int32Array</li>
<li>Number</li>
<li>Object</li>
<li>Uint8Array</li>
<li>Uint8ClampedArray</li>
<li>Uint16Array</li>
<li>Uint32Array</li>
<li>String</li>
</ul>
<p>Для добавления и получения информации по некоторому ключу мы можем воспользоваться интуитивными методами <code>setItem</code> и <code>getItem</code>:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localforage.setItem(<span class="string">'key'</span>, <span class="string">'some value'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">localforage.getItem(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Также легко мы можем удалить элементы по ключу:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localforage.removeItem(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Key is cleared!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Помимо того мы можем очистить все хранилище, получить его размер, ключи, а также провести итерацию по всем ключам/значениям.</p>
<h4 id="u041D_u0430_u0441_u0442_u0440_u043E_u0439_u043A_u0430_localForage"><a href="#u041D_u0430_u0441_u0442_u0440_u043E_u0439_u043A_u0430_localForage" class="headerlink" title="Настройка localForage"></a>Настройка localForage</h4><p>Простейшим образом мы можем указать список предпочитаемых хранилищ, используемых библиотекой:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localforage.setDriver(localforage.LOCALSTORAGE);</span><br><span class="line"><span class="comment">// А таким образом мы указываем список предпочитаемых хранилищ</span></span><br><span class="line">localforage.setDriver([localforage.WEBSQL, localforage.INDEXEDDB]);</span><br></pre></td></tr></table></figure></p>
<p>Также мы можем указать название хранилища, его размер, версию и описание, воспользовавшись функцией <code>localgorage.config( ... )</code></p>
<h4 id="u0418_u0441_u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u043D_u0438_u0435__u0441_u0432_u043E_u0438_u0445__u0434_u0440_u0430_u0439_u0432_u0435_u0440_u043E_u0432"><a href="#u0418_u0441_u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u043D_u0438_u0435__u0441_u0432_u043E_u0438_u0445__u0434_u0440_u0430_u0439_u0432_u0435_u0440_u043E_u0432" class="headerlink" title="Использование своих драйверов"></a>Использование своих драйверов</h4><p>Если вас не устраивают хранилища, предлагаемые по умолчанию, вы можете добавить свой драйвер:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCustomDriver = &#123;</span><br><span class="line">    _driver: <span class="string">'customDriverUniqueName'</span>,</span><br><span class="line">    _initStorage: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getItem: <span class="function"><span class="keyword">function</span>(<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    key: <span class="function"><span class="keyword">function</span>(<span class="params">n, callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    keys: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    length: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    removeItem: <span class="function"><span class="keyword">function</span>(<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    setItem: <span class="function"><span class="keyword">function</span>(<span class="params">key, value, callback</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// Реализация ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Мы добавляем свой драйвер, после чего мы можем его использовать</span></span><br><span class="line">localforage.defineDriver(myCustomDriver);</span><br></pre></td></tr></table></figure></p>
<h4 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h4><p>Таким образом localForage является удобной оберткой над хранилищами WebSQL, IndexedDB и localStorage, отделяя работу с хранилищами от непосредственной работой с данными, хранимыми offline.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Большинство современных веб-приложений каким-либо образом хранят отдельные данные у клиента, пользуясь такими средствами как localStorage, WebSQL или IndexedDB. Так, например, для небольших HTML5-игр весьма удобно хранить результаты игрока локально - не нужно писать взаимодействие с базами данных, а сохранив все локально, игрок легко может продолжить прогресс с места своего сохранения.<br>Однако несмотря на удобство, возникает проблема - хранилища реализуют схожий функционал, однако методы,предлагаемые API, весьма различаются. Это создает проблемы конечному разработчику, который вынужден держать в голове список всех функций,их аргументов и т.д. Помимо этого каждое хранилище имеет свои достоинства и недостатки, что также сказывается на разработке. По этой причине Mozilla представила свою библиотеку <a href="http://mozilla.github.io/localForage/">localForage</a>, позволяющую забыть о таких мелочах и сосредоточиться на реализации функционала. Рассмотрим ее возможности подробнее.<br>]]>
    
    </summary>
    
      <category term="indexedDB" scheme="http://asaskevich.github.io/tags/indexedDB/"/>
    
      <category term="localForage" scheme="http://asaskevich.github.io/tags/localForage/"/>
    
      <category term="localStorage" scheme="http://asaskevich.github.io/tags/localStorage/"/>
    
      <category term="webSql" scheme="http://asaskevich.github.io/tags/webSql/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Валидация данных в Go при помощи govalidator]]></title>
    <link href="http://asaskevich.github.io/2015/02/09/validatsiia-dannykh-v-go-pri-pomoshchi-govalidator/"/>
    <id>http://asaskevich.github.io/2015/02/09/validatsiia-dannykh-v-go-pri-pomoshchi-govalidator/</id>
    <published>2015-02-09T18:09:36.000Z</published>
    <updated>2016-01-16T16:04:47.100Z</updated>
    <content type="html"><![CDATA[<p>Валидация уже очень давно применяется в самых различных веб и декстопных приложениях. Уже сломано немало копий, написана куча пакетов для различных языков программирования, решающих эту задачу. Давайте посмотрим, каким образом можно проверять данные в Go программах, используя пакет <a href="https://github.com/asaskevich/govalidator" target="_blank" rel="external">govalidator</a>.</p>
<a id="more"></a>
<h3 id="u0412_u0430_u043B_u0438_u0434_u0430_u0446_u0438_u044F"><a href="#u0412_u0430_u043B_u0438_u0434_u0430_u0446_u0438_u044F" class="headerlink" title="Валидация"></a>Валидация</h3><p>Валидация входных данных - это проверка этих самых данных на соответствие некоторым условиям. “Невалидные” данные, не удовлетворяющие определённым ограничениям или условиям, могут вызывать сбой в программе, порою весьма критичный. Давайте представим, что в каком-то месте выстреливает исключение, например, в момент когда программа пытается преобразовать строку некорректного формата в число. Если это исключение не обрабатывается где-то в программе, то есть вероятность, что произойдет аварийное завершение программы.</p>
<p>И падение программы - это только одна из неприятностей, которые могут произойти. Мы можем перехватывать исключение и восстанавливаться после сбоев. Однако это связанно с накладными расходами, что может ощутимо снизить производительность программы, что тоже не всегда является плюсом.</p>
<p>Кроме того, падения может вообще не произойти, но последствия от этого будут не менее плачевными. Если данные недостаточно проверяются, то это открытая дверь для внешних инъекций. Злоумышленник может получить несанкционированный доступ к данным или некоторым возможностям программы, либо способен вообще разрушить данные или программу.</p>
<p>Когда где-то внутри программы происходит исключительная ситуация, то не всегда есть возможность проследить причины ее возникновения. И даже если это возможно, то нужно как-то объяснить пользователю, что сбой вызван данными, которыми он ввел.</p>
<p>Все это и является причинами, по которым люди придумали валидировать данные, и в случае ошибочных данных немедленно сообщать об этом.</p>
<h3 id="u041F_u0430_u043A_u0435_u0442_govalidator"><a href="#u041F_u0430_u043A_u0435_u0442_govalidator" class="headerlink" title="Пакет govalidator"></a>Пакет govalidator</h3><p>Этот пакет предоставляет простой интерфейс для проверки некоторых строковых данных на соответствие определенным условиям. У всех функций примерно одинаковый формат, вида <code>func IsSomething(str string) bool</code>, причем таких функций <a href="https://github.com/asaskevich/govalidator#list-of-functions" target="_blank" rel="external">достаточно много</a>, почти на все случаи жизни.</p>
<h4 id="u0418_u0441_u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u043D_u0438_u0435"><a href="#u0418_u0441_u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u043D_u0438_u0435" class="headerlink" title="Использование"></a>Использование</h4><p>Чтобы начать пользоваться пакетом, его нужно установить в вашем рабочем окружении:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/asaskevich/govalidator</span><br></pre></td></tr></table></figure></p>
<p>Теперь мы можем пользоваться подключить пакет <code>govalidator</code> в своем проекте и использовать его.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/asaskevich/govalidator"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>Если длинное название пакета вас не устраивает, можно заменить его на более краткое, например так:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    v <span class="string">"github.com/asaskevich/govalidator"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>Функций, доступных к использованию, очень много, большинство из них имеют сигнатуру <code>IsSomething(str string) bool</code>. Кроме того, пакет имеет функции конвертации данных, например преобразование строк в числа и анонимные структуры.</p>
<p>Мы можем валидировать данные по отдельности:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(govalidator.IsAlphanumeric(<span class="string">"12345"</span>))</span><br></pre></td></tr></table></figure></p>
<p>либо валидировать сразу целую структуру. Для этого удобно использовать теги <code>valid</code>, указывая таким образом, как необходимо проверить структуру. Если вы хотите применить к одному полю более одного валидатора, то перечисляйте их через запятую. В случае когда вам нужно пропустить валидацию - используйте <code>-</code> в теге <code>valid</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Post <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title    <span class="typename">string</span> <span class="string">`valid:"alphanum,required"`</span></span><br><span class="line">    Message  <span class="typename">string</span> <span class="string">`valid:"duck,ascii"`</span></span><br><span class="line">    AuthorIP <span class="typename">string</span> <span class="string">`valid:"ipv4"`</span></span><br><span class="line">    Date     <span class="typename">string</span> <span class="string">`valid:"-"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Соответствие тегов и методов валидации приведено <a href="https://github.com/asaskevich/govalidator#validatestruct-2" target="_blank" rel="external">в этом списке</a>. Если вам чего-то не хватает, то можно добавить свой валидатор к общему списку, устройство пакета приветствует это:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">govalidator.TagMap[<span class="string">"duck"</span>] = govalidator.Validator(<span class="keyword">func</span>(str <span class="typename">string</span>) <span class="typename">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str == <span class="string">"duck"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Теперь можем проверить всю структуру сразу:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">post := &amp;Post&#123;</span><br><span class="line">    Title:   <span class="string">"My Example Post"</span>,</span><br><span class="line">    Message: <span class="string">"duck"</span>,</span><br><span class="line">    AuthorIP: <span class="string">"123.234.54.3"</span>,</span><br><span class="line">&#125;</span><br><span class="line">result, err := govalidator.ValidateStruct(post)</span><br><span class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"error: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure></p>
<p>Заметим, что пакет проверяет структуры рекурсивно, что еще более упрощает жизнь разработчика.</p>
<p>Как видите, использование специализированных валидаторов упрощает работу с данными.</p>
<h4 id="u0423_u0441_u0442_u0440_u043E_u0439_u0441_u0442_u0432_u043E"><a href="#u0423_u0441_u0442_u0440_u043E_u0439_u0441_u0442_u0432_u043E" class="headerlink" title="Устройство"></a>Устройство</h4><p>Основную роль в пакете <code>govalidator</code> играют пакеты <code>reflect</code> и <code>regexp</code>. Регулярные выражения нам нужны для сравнения строковых данных с паттернами:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> govalidator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Основные регулярные выражения для валидации строк</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Alpha        <span class="typename">string</span> = <span class="string">"^[a-zA-Z]+$"</span></span><br><span class="line">    Alphanumeric <span class="typename">string</span> = <span class="string">"^[a-zA-Z0-9]+$"</span></span><br><span class="line">    Numeric      <span class="typename">string</span> = <span class="string">"^[-+]?[0-9]+$"</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    rxAlpha        = regexp.MustCompile(Alpha)</span><br><span class="line">    rxAlphanumeric = regexp.MustCompile(Alphanumeric)</span><br><span class="line">    rxNumeric      = regexp.MustCompile(Numeric)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>Все регулярные выражения в пакете сразу компилируются, уменьшая время работы каждого валидатора.</p>
<p>Пакет <code>reflect</code> используется для работы с типами, а также валидации структур. Так же при помощи него мы можем разбирать теги структур, а это не возможно без пакета <code>reflect</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ValidateStruct используем теги для полей структуры</span></span><br><span class="line"><span class="keyword">func</span> ValidateStruct(s <span class="keyword">interface</span>&#123;&#125;) (<span class="typename">bool</span>, error) &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">true</span>, <span class="constant">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    result := <span class="constant">true</span></span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    val := reflect.ValueOf(s)</span><br><span class="line">    <span class="keyword">if</span> val.Kind() == reflect.Interface || val.Kind() == reflect.Ptr &#123;</span><br><span class="line">        val = val.Elem()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u0410_u043D_u0430_u043B_u043E_u0433_u0438"><a href="#u0410_u043D_u0430_u043B_u043E_u0433_u0438" class="headerlink" title="Аналоги"></a>Аналоги</h3><p>Одним из самых ближайших аналогов является пакет <a href="https://github.com/go-validator/validator" target="_blank" rel="external">github.com/go-validator/validator</a>. Этот пакет также может валидировать структуры целиком, однако его функционал значительно беднее.</p>
<p>Вероятно, если вы пишете веб приложение, то вам стоит обратить внимания на более веб-ориентированные решения, такие как <a href="https://github.com/absoludity/goforms" target="_blank" rel="external">github.com/absoludity/goforms</a>. Преимущество таких пакетов в том, что они являются надстройкой над <code>http.Request</code> и используются для удобной работы с формами, в том числе и валидации данных из этой формы. Конечно, это значительно менее универсальный подход, который ограничивает область валидации данных.</p>
<h3 id="u0410_u043D_u0430_u043B_u043E_u0433_u0438__u0432__u0434_u0440_u0443_u0433_u0438_u0445__u044F_u0437_u044B_u043A_u0430_u0445"><a href="#u0410_u043D_u0430_u043B_u043E_u0433_u0438__u0432__u0434_u0440_u0443_u0433_u0438_u0445__u044F_u0437_u044B_u043A_u0430_u0445" class="headerlink" title="Аналоги в других языках"></a>Аналоги в других языках</h3><p>Проблема валидации данных не нова, уже существует достаточное множество решений, разработанных с учетом потребностей пользователей, а также языков реализации. Самым ближайшим “родственником” данного пакета является JavaScript пакет <a href="https://github.com/chriso/validator.js" target="_blank" rel="external">validator.js</a>. В языке Java сходную задачу решает <a href="http://beanvalidation.org/" target="_blank" rel="external">BeanValidation</a>.</p>
<h3 id="u041E_u0442_u0437_u044B_u0432_u044B__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u0435_u043B_u0435_u0439"><a href="#u041E_u0442_u0437_u044B_u0432_u044B__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u0435_u043B_u0435_u0439" class="headerlink" title="Отзывы пользователей"></a>Отзывы пользователей</h3><p>Естественно, всегда найдутся критики, которые не только укажут на недостаток, но и помогут его решить. К примеру, некоторые были удивлены тем, что некоторые функции пакета являются просто надстройкой над стандартными функциями Go. Некоторые были удивлены тем, что проверка email адресов производится на основе регулярного выражения. По их мнению, гораздо лучше послать сообщение конечному пользователю, убедившись таким образом не просто в корректности адреса, а в его реальности. Но в целом пакет принят комьюнити и активно им поддерживается, за полгода существования приняты и внесены десятки пулл-реквестов, улучшающих пакет в разы.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Валиция всегда была и остается очень важной проблемой, которая должна решаться в рамках любого приложения. К счастью, уже написано множество пакетов, которые выполняют за нас часть работы. Для внедрения максимально надежной, гибкой  и универсальной валидации данных можно и нужно использовать пакет <a href="https://github.com/asaskevich/govalidator" target="_blank" rel="external">govalidator</a>.</p>
<h3 id="u041C_u0430_u043B_u0435_u043D_u044C_u043A_u0430_u044F__u0437_u0430_u043C_u0435_u0442_u043A_u0430"><a href="#u041C_u0430_u043B_u0435_u043D_u044C_u043A_u0430_u044F__u0437_u0430_u043C_u0435_u0442_u043A_u0430" class="headerlink" title="Маленькая заметка"></a>Маленькая заметка</h3><p>Данная статья была первоначально опубликована вот <a href="http://4gophers.com/article/govalidator" target="_blank" rel="external">здесь</a>, за что отдельное спасибо Артему Ковардину.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Валидация уже очень давно применяется в самых различных веб и декстопных приложениях. Уже сломано немало копий, написана куча пакетов для различных языков программирования, решающих эту задачу. Давайте посмотрим, каким образом можно проверять данные в Go программах, используя пакет <a href="https://github.com/asaskevich/govalidator">govalidator</a>.</p>]]>
    
    </summary>
    
      <category term="API" scheme="http://asaskevich.github.io/tags/API/"/>
    
      <category term="Go" scheme="http://asaskevich.github.io/tags/Go/"/>
    
      <category term="Validation" scheme="http://asaskevich.github.io/tags/Validation/"/>
    
      <category term="Go" scheme="http://asaskevich.github.io/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Minecraft Forge: кастомные тексты в GUI контейнеров]]></title>
    <link href="http://asaskevich.github.io/2015/02/08/minecraft-forge-kastomnyie-tieksty-v-gui-kontieinierov/"/>
    <id>http://asaskevich.github.io/2015/02/08/minecraft-forge-kastomnyie-tieksty-v-gui-kontieinierov/</id>
    <published>2015-02-08T08:40:45.000Z</published>
    <updated>2016-01-16T16:04:53.735Z</updated>
    <content type="html"><![CDATA[<p>При разработке очередной версии SmartCursor”а мне потребовалось добавить новую возможность - отображение мода, из которого загружен очередной блок или предмет, в GUI контейнеров, будь то инвентарь игрока, сундуки или даже рюкзаки из мода Backpacks.</p>
<a id="more"></a>
<p>Задача, мягко говоря, не совсем обычная, и возникает она у модмейкеров не слишком часто, однако после изучения API я обнаружил то, что мне нужно.</p>
<h4 id="u0421_u043E_u0431_u044B_u0442_u0438_u0435_ItemTooltipEvent"><a href="#u0421_u043E_u0431_u044B_u0442_u0438_u0435_ItemTooltipEvent" class="headerlink" title="Событие ItemTooltipEvent"></a>Событие ItemTooltipEvent</h4><p>Данное событие вызывается системой, когда игрок наводит курсор на слот, заполенный некоторым предметом. Событие содержит три поля: <code>ItemStack</code>, который вызвал это событие, список текстов для подсказки, а также флаг <code>showAdvancedItemTooltips</code>, указывающий на то, что подсказка вызывается в режиме отображения дополнительной информации, которая, кстати говоря, активируется клавишами <code>F3 + H</code>. Класс события расположен в пакете <code>net.minecraftforge.event.entity.player</code>.</p>
<h4 id="u041F_u043E_u0434_u043F_u0438_u0441_u043A_u0430__u043D_u0430__u0441_u043E_u0431_u044B_u0442_u0438_u0435"><a href="#u041F_u043E_u0434_u043F_u0438_u0441_u043A_u0430__u043D_u0430__u0441_u043E_u0431_u044B_u0442_u0438_u0435" class="headerlink" title="Подписка на событие"></a>Подписка на событие</h4><p>Подписка ничем не отличается от подписки на другие события. Создаем класс, в котором описываем некоторый метод, принимающий в качестве аргумента событие, а затем вешаем на метод аннотацию <code>SubscribeEvent</code>:<br><figure class="highlight java"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SubscribeEvent</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTooltipText</span><span class="params">(ItemTooltipEvent event)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<p>После чего подключаем экземпляр к шине событий Forge:<br><figure class="highlight java"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MinecraftForge.EVENT_BUS.register(<span class="keyword">new</span> SomeClass());</span><br></pre></td></tr></table></figure></p>
<h4 id="u0414_u043E_u0431_u0430_u0432_u043B_u0435_u043D_u0438_u0435__u0442_u0435_u043A_u0441_u0442_u043E_u0432"><a href="#u0414_u043E_u0431_u0430_u0432_u043B_u0435_u043D_u0438_u0435__u0442_u0435_u043A_u0441_u0442_u043E_u0432" class="headerlink" title="Добавление текстов"></a>Добавление текстов</h4><p>Собственно, ничего сложного, достаем из события список текстов и добавляем в него свои тексты:<br><figure class="highlight java"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ItemStack stack = event.itemStack;</span><br><span class="line">event.toolTip.add(<span class="string">"Unlocalized name:"</span> + stack.getUnlocalizedName());</span><br></pre></td></tr></table></figure></p>
<p>На примере выше мы добавим к подсказке нелокализованную версию имени блока.</p>
<h4 id="u0420_u0430_u0441_u043A_u0440_u0430_u0441_u043A_u0430__u0442_u0435_u043A_u0441_u0442_u043E_u0432"><a href="#u0420_u0430_u0441_u043A_u0440_u0430_u0441_u043A_u0430__u0442_u0435_u043A_u0441_u0442_u043E_u0432" class="headerlink" title="Раскраска текстов"></a>Раскраска текстов</h4><p>Опционально мы можем сделать наши тексты более яркими. Воспользовавшись перечислением <code>EnumChatFormatting</code> из пакета <code>net.minecraft.util</code> мы можем сделать текст таким, как хотим этого мы. В качестве примера сделаем слова <code>Unlocalized name:</code> из примера выше голубого цвета, а шрифт изменим на курсив:<br><figure class="highlight java"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.toolTip.add(EnumChatFormatting.AQUA + <span class="string">""</span> + EnumChatFormatting.ITALIC + <span class="string">"Unlocalized name:"</span> + EnumChatFormatting.RESET + stack.getUnlocalizedName());</span><br></pre></td></tr></table></figure></p>
<h4 id="u0420_u0435_u0437_u0443_u043B_u044C_u0442_u0430_u0442"><a href="#u0420_u0435_u0437_u0443_u043B_u044C_u0442_u0430_u0442" class="headerlink" title="Результат"></a>Результат</h4><p>Вот собственно и весь результат:</p>
<p><img src="/images/screen-1.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>При разработке очередной версии SmartCursor”а мне потребовалось добавить новую возможность - отображение мода, из которого загружен очередной блок или предмет, в GUI контейнеров, будь то инвентарь игрока, сундуки или даже рюкзаки из мода Backpacks.</p>]]>
    
    </summary>
    
      <category term="API" scheme="http://asaskevich.github.io/tags/API/"/>
    
      <category term="Forge" scheme="http://asaskevich.github.io/tags/Forge/"/>
    
      <category term="Minecraft" scheme="http://asaskevich.github.io/tags/Minecraft/"/>
    
      <category term="Modding" scheme="http://asaskevich.github.io/tags/Modding/"/>
    
      <category term="Java" scheme="http://asaskevich.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Material Design вместе с Angular.js]]></title>
    <link href="http://asaskevich.github.io/2015/02/07/material-design-vmiestie-s-angular-dot-js/"/>
    <id>http://asaskevich.github.io/2015/02/07/material-design-vmiestie-s-angular-dot-js/</id>
    <published>2015-02-07T18:37:30.000Z</published>
    <updated>2016-01-16T16:04:56.975Z</updated>
    <content type="html"><![CDATA[<p>С выходом в свет новой версии Android 5.0, названной Lollipop, компания Google представила новое видение дизайна пользовательского интерфейса - <a href="http://www.google.com/design/" target="_blank" rel="external">Google Material Design</a>. Вслед за появлением <a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">спецификации</a> разработчики привнесли немного “материальности” в свои фреймворки, такие как Angular.js, React.js, даже всем известный Twitter Bootstrap <a href="https://fezvrasta.github.io/bootstrap-material-design/" target="_blank" rel="external">сделали “материальным”</a>.</p>
<p>В связи с этим хотелось бы рассмотреть, как же такие известные фреймворки внедряют поддержку Material Design. Рассмотрим это на примере Angular.js.</p>
<a id="more"></a>
<h4 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h4><p>Установка ничем не отличается от установки большинства пакетов - нам достаточно иметь установленный bower:<br><figure class="highlight bash"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install angular-material</span><br></pre></td></tr></table></figure></p>
<p>Такой способ гораздо предпочтительнее, хотя есть вариант с использованием CDN. С ним мы можем попробовать поэкспериментировать прямо в CodePen или JSFiddle:<br><figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"//ajax.googleapis.com/ajax/libs/angular_material/0.7.0/angular-material.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Некоторый HTML код --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//ajax.googleapis.com/ajax/libs/angularjs/1.3.6/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//ajax.googleapis.com/ajax/libs/angularjs/1.3.6/angular-animate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//ajax.googleapis.com/ajax/libs/angularjs/1.3.6/angular-aria.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//ajax.googleapis.com/ajax/libs/angular_material/0.7.0/angular-material.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="u0420_u0430_u0437_u043C_u0435_u0442_u043A_u0430"><a href="#u0420_u0430_u0437_u043C_u0435_u0442_u043A_u0430" class="headerlink" title="Разметка"></a>Разметка</h4><p>В данном случае разметка построена на современном flexbox’е, что, несомненно, является подспорьем в мире адаптивных сайтов. Фремворк вводит специальные теги и атрибуты, при помощи которых можно построить нужный нам интерфейс. Так, для разметки используется тег <code>div</code> с различными атрибутами, например <code>layout</code> или <code>flex</code>.</p>
<h4 id="u041A_u043E_u043C_u043F_u043E_u043D_u0435_u043D_u0442_u044B"><a href="#u041A_u043E_u043C_u043F_u043E_u043D_u0435_u043D_u0442_u044B" class="headerlink" title="Компоненты"></a>Компоненты</h4><p>Фреймворк предлагает к использованию различные компоненты - кнопки, поля ввода, радио-кнопки, вкладки, сайд-бары, подсказки и тому-подобное. В каждый из них мы вникать не будем, мы только рассмотрим общую структуру построения приложения с использованием Material Angular.</p>
<h4 id="u0427_u0442_u043E__u0436_u0435__u043F_u043E_u043F_u0440_u043E_u0431_u0443_u0435_u043C__u0441_u043E_u0437_u0434_u0430_u0442_u044C_3F"><a href="#u0427_u0442_u043E__u0436_u0435__u043F_u043E_u043F_u0440_u043E_u0431_u0443_u0435_u043C__u0441_u043E_u0437_u0434_u0430_u0442_u044C_3F" class="headerlink" title="Что же попробуем создать?"></a>Что же попробуем создать?</h4><p>А попробуем мы вот что: мы напишем маленькое, но практичное приложение - простейшую анкету пользователей. Действовать она будет примерно так - две вкладки, в одной поля ввода отдельного человека, во второй вкладке список введенных пользователей.</p>
<h4 id="u0424_u043E_u0440_u043C_u0438_u0440_u0443_u0435_u043C__u0440_u0430_u0437_u043C_u0435_u0442_u043A_u0443"><a href="#u0424_u043E_u0440_u043C_u0438_u0440_u0443_u0435_u043C__u0440_u0430_u0437_u043C_u0435_u0442_u043A_u0443" class="headerlink" title="Формируем разметку"></a>Формируем разметку</h4><p>Первым делом опишем две вкладки и основу приложения. Приложение мы создаем стандартно - ничего особенного в нем нету:<br><figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [<span class="string">'ngMaterial'</span>]);</span><br><span class="line">app.controller(<span class="string">'AppCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure></p>
<p>Теперь описываем <code>div</code>, к которому будет привязано приложение и контроллер. Внутри него разместим вкладки <code>md-tabs</code>, а также <code>ng-switch</code>, который будет описывать содержимое каждой вкладки отдельно. Также сделаем привязку к модели <code>data.selectedIndex</code>, чтобы иметь возможность контролировать текущую вкладку:<br><figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span> <span class="attribute">ng-controller</span>=<span class="value">"AppCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">md-tabs</span> <span class="attribute">md-selected</span>=<span class="value">"data.selectedIndex"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">md-tab</span> <span class="attribute">id</span>=<span class="value">"tab1"</span> <span class="attribute">aria-controls</span>=<span class="value">"tab1-content"</span>&gt;</span></span><br><span class="line">            Ввод анкеты</span><br><span class="line">        <span class="tag">&lt;/<span class="title">md-tab</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">md-tab</span> <span class="attribute">id</span>=<span class="value">"tab2"</span> <span class="attribute">aria-controls</span>=<span class="value">"tab2-content"</span>&gt;</span></span><br><span class="line">            Список пользователей</span><br><span class="line">        <span class="tag">&lt;/<span class="title">md-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">md-tabs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ng-switch</span> <span class="attribute">on</span>=<span class="value">"data.selectedIndex"</span> <span class="attribute">class</span>=<span class="value">"tabpanel-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">role</span>=<span class="value">"tabpanel"</span> <span class="attribute">id</span>=<span class="value">"tab1-content"</span> <span class="attribute">aria-labelledby</span>=<span class="value">"tab1"</span> <span class="attribute">ng-switch-when</span>=<span class="value">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">role</span>=<span class="value">"tabpanel"</span> <span class="attribute">id</span>=<span class="value">"tab2-content"</span> <span class="attribute">aria-labelledby</span>=<span class="value">"tab2"</span> <span class="attribute">ng-switch-when</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ng-switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Я думаю, вы заметили, что элементы с префиксом <code>md-</code> относятся к Material Design, а <code>ng-</code> - стандартные элементы Angular.</p>
<p>Теперь опишем поля ввода для первой вкладки. Для этого воспользуемся тегом <code>md-whiteframe</code> для создания пустого окна, а в нем разместим непосредственно поля ввода, как на примере ниже:<br><figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">md-input-container</span> <span class="attribute">flex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">label</span>&gt;</span>Адрес<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">"user.address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">md-input-container</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>На самом деле кода получается гораздо больше, однако там везде все аналогично - создается контейнер, метка и поле ввода, создается привязка к модели и вуа-ля!</p>
<p>Легко добавить проверку данных. Так, например, мы легко можем добавить ограничение по длине вводимого текста:<br><figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">md-maxlength</span>=<span class="value">"20"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Добавим кнопку сохранения данных:<br><figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">md-button</span> <span class="attribute">class</span>=<span class="value">"md-fab md-primary"</span> <span class="attribute">aria-label</span>=<span class="value">"Сохранить"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">md-icon</span> <span class="attribute">icon</span>=<span class="value">"//material.angularjs.org/img/icons/ic_insert_drive_file_24px.svg"</span> <span class="attribute">style</span>=<span class="value">"width: 24px; height: 24px;"</span>&gt;</span><span class="tag">&lt;/<span class="title">md-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">md-button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Для этой кнопки нам необходимо описать в контроллере функцию <code>save</code>, а также добавить прикрепить ее к самой кнопке:<br><figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.controller(<span class="string">'AppCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">  $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">md-button</span> <span class="attribute">...</span> <span class="attribute">ng-click</span>=<span class="value">"save()"</span>&gt;</span> ...</span><br></pre></td></tr></table></figure>
<h4 id="u041A_u043E_u043D_u0442_u0440_u043E_u043B_u043B_u0435_u0440"><a href="#u041A_u043E_u043D_u0442_u0440_u043E_u043B_u043B_u0435_u0440" class="headerlink" title="Контроллер"></a>Контроллер</h4><p>Собственно теперь нам необходимо реализовать базовый функционал контроллера <code>AppCtrl</code>. Все делается стандартно, ничего неожиданного тут нету. Мой контроллер выглядит примерно так:<br><figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.controller(<span class="string">'AppCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Модели полей ввода</span></span><br><span class="line">    $scope.user = &#123;</span><br><span class="line">        firstName: <span class="string">''</span>,</span><br><span class="line">        lastName: <span class="string">''</span>,</span><br><span class="line">        address: <span class="string">''</span>,</span><br><span class="line">        state: <span class="string">''</span>,</span><br><span class="line">        postalCode: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Список введенных и сохраненных анкет</span></span><br><span class="line">    $scope.users = [];</span><br><span class="line">    <span class="comment">// Функция сохранения</span></span><br><span class="line">    $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.users.push($scope.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="u0412_u044B_u0432_u043E_u0434__u0441_u043F_u0438_u0441_u043A_u0430__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u0435_u043B_u0435_u0439"><a href="#u0412_u044B_u0432_u043E_u0434__u0441_u043F_u0438_u0441_u043A_u0430__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u0435_u043B_u0435_u0439" class="headerlink" title="Вывод списка пользователей"></a>Вывод списка пользователей</h4><p>После того, как мы реализовали контроллер на сохранение анкет, нам надо реализовать их вывод. Поддержка “материальных” списков реализуется при помощи тегов <code>md-list</code> и <code>md-item</code>, а сам Angular предлагает атрибут <code>ng-repeat</code>, которым запросто можно пробежать по всем элементам некоторого списка. Реализуем вывод списка:</p>

<!--￼10-->


<p>Теперь реализуем кнопку удаления отдельного элемента. Material Angular вводит поддержку специальных сервисов, таких как диалоги, подсказки. Реализуем диалог подтверждения удаления пользователя. С этим нам поможет сервис <code>$mdDialog</code>, предлагающий несколько вариантов модальных окон. Помимо этого он позволяет нам реализовать свое модальное окно. Здорово, не правда ли? Подключим к кнопке удаления функцию <code>delete</code>:<br><figure class="highlight html"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">md-button</span> <span class="attribute">class</span>=<span class="value">"md-raised md-warn"</span> <span class="attribute">ng-click</span>=<span class="value">"delete($index, $event)"</span>&gt;</span>Удалить<span class="tag">&lt;/<span class="title">md-button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>В функцию будет передаваться индекс выбираемого элемента и событие, которое мы отдадим сервису. Реализуем функцию <code>delete</code>. Диалоговое окно создается весьма просто - создается объект и путем последовательного применения нужных команд этот самый объект настраивается:<br><figure class="highlight javascript"><figcaption><span>Sample Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$scope.delete = <span class="function"><span class="keyword">function</span>(<span class="params">index, ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> confirm = $mdDialog.confirm()</span><br><span class="line">        .title(<span class="string">'Вы желаете удалить данного пользователя'</span>)</span><br><span class="line">        .content(<span class="string">'В случае согласия данные будут полностью удалены из списка.'</span>)</span><br><span class="line">        .ok(<span class="string">'Удалить!'</span>)</span><br><span class="line">        .cancel(<span class="string">'Отменить'</span>)</span><br><span class="line">        .targetEvent(ev);</span><br><span class="line">    $mdDialog.show(confirm).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.users.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>После того,как объект был создан, его можно вызвать,указав колбэк-функции, которые будут вызваны в случае нажатия одной из кнопок.<br>Собственно теперь весь основной функционал реализован и можно заняться внедрением своих “фич” и стилизацией. Однако, если вы хотите, чтобы вся “материальность” была сохранена, то вам стоит почитать официальную спецификацию.</p>
<h4 id="u0420_u0435_u0437_u0443_u043B_u044C_u0442_u0430_u0442"><a href="#u0420_u0435_u0437_u0443_u043B_u044C_u0442_u0430_u0442" class="headerlink" title="Результат"></a>Результат</h4><p></p><p data-height="346" data-theme-id="0" data-slug-hash="myMyXx" data-default-tab="result" data-user="asaskevich" class="codepen">See the Pen <a href="http://codepen.io/asaskevich/pen/myMyXx/" target="_blank" rel="external">myMyXx</a> by Alex Saskevich (<a href="http://codepen.io/asaskevich" target="_blank" rel="external">@asaskevich</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h4 id="u0412__u0437_u0430_u0432_u0435_u0440_u0448_u0435_u043D_u0438_u0435"><a href="#u0412__u0437_u0430_u0432_u0435_u0440_u0448_u0435_u043D_u0438_u0435" class="headerlink" title="В завершение"></a>В завершение</h4><p>Собственно это все, что я хотел показать, весь код статьи расположен на CodePen вот тут: <a href="http://codepen.io/asaskevich/pen/myMyXx" target="_blank" rel="external">http://codepen.io/asaskevich/pen/myMyXx</a>. Ну а сам Angular Material Design вместе с примерами и документацией расположен тут: <a href="https://material.angularjs.org" target="_blank" rel="external">https://material.angularjs.org</a>.</p>
<h4 id="u041C_u0430_u043B_u0435_u043D_u044C_u043A_u0430_u044F__u0437_u0430_u043C_u0435_u0442_u043A_u0430"><a href="#u041C_u0430_u043B_u0435_u043D_u044C_u043A_u0430_u044F__u0437_u0430_u043C_u0435_u0442_u043A_u0430" class="headerlink" title="Маленькая заметка"></a>Маленькая заметка</h4><p>Данная статья была первоначально опубликована вот <a href="http://html5.by/blog/material-design-and-angular-js/" target="_blank" rel="external">здесь</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>С выходом в свет новой версии Android 5.0, названной Lollipop, компания Google представила новое видение дизайна пользовательского интерфейса - <a href="http://www.google.com/design/">Google Material Design</a>. Вслед за появлением <a href="http://www.google.com/design/spec/material-design/introduction.html">спецификации</a> разработчики привнесли немного “материальности” в свои фреймворки, такие как Angular.js, React.js, даже всем известный Twitter Bootstrap <a href="https://fezvrasta.github.io/bootstrap-material-design/">сделали “материальным”</a>.</p>
<p>В связи с этим хотелось бы рассмотреть, как же такие известные фреймворки внедряют поддержку Material Design. Рассмотрим это на примере Angular.js.</p>]]>
    
    </summary>
    
      <category term="Angular.js" scheme="http://asaskevich.github.io/tags/Angular-js/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="Material Design" scheme="http://asaskevich.github.io/tags/Material-Design/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Moment.js: работа с датами в JavaScript]]></title>
    <link href="http://asaskevich.github.io/2014/09/03/moment-dot-js-rabota-s-datami-v-javascript/"/>
    <id>http://asaskevich.github.io/2014/09/03/moment-dot-js-rabota-s-datami-v-javascript/</id>
    <published>2014-09-03T17:32:12.000Z</published>
    <updated>2016-01-16T16:04:59.933Z</updated>
    <content type="html"><![CDATA[<p>Очень часто необходимо работать с информацией типа времени и дат, обрабатывая их таким образом, как этого требует программа. Существует огромное множество решений, каждое из которых умеет выполнять какие-то информации с датами - одни лучше, другие хуже. Среди этого разнообразия существует библиотека <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a>, которая умеет больше, чем не умеет.</p>
<a id="more"></a>
<h3 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h3><p>Для использования библиотеки на стороне сервера нужно установить ее при помощи <code>npm</code> или <code>bower</code>:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bower install moment --save</span><br><span class="line">npm install moment --save</span><br></pre></td></tr></table></figure></p>
<p>Для использования на стороне клиента нужно скачать необходимые файлы и подключить их на вашу страницу.</p>
<h3 id="u0424_u043E_u0440_u043C_u0430_u0442_u0438_u0440_u043E_u0432_u0430_u043D_u0438_u0435__u0434_u0430_u0442"><a href="#u0424_u043E_u0440_u043C_u0430_u0442_u0438_u0440_u043E_u0432_u0430_u043D_u0438_u0435__u0434_u0430_u0442" class="headerlink" title="Форматирование дат"></a>Форматирование дат</h3><p>Начнем с того, что научимся превращать текущее время в удобочитаемый вид. Библиотека поддерживает много локализаций, среди них русский и английский. Все делaется просто - получаем текущее время и дату и форматируем его вывод:<br><figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moment().format(<span class="string">'MMMM Do YYYY, h:mm:ss a'</span>); <span class="comment">// сентябрь 3-го 2014, 8:02:18 вечера</span></span><br><span class="line">moment().format(<span class="string">'dddd'</span>);                    <span class="comment">// среда</span></span><br><span class="line">moment().format(<span class="string">"MMM Do YY"</span>);               <span class="comment">// сен 3-го 14</span></span><br><span class="line">moment().format(<span class="string">'YYYY [, а месяц] MMMM'</span>);   <span class="comment">// 2014 , а месяц сентябрь</span></span><br><span class="line">moment().format();                          <span class="comment">// 2014-09-03T20:02:18+03:00</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u041E_u0442_u043D_u043E_u0441_u0438_u0442_u0435_u043B_u044C_u043D_u043E_u0435__u0432_u0440_u0435_u043C_u044F"><a href="#u041E_u0442_u043D_u043E_u0441_u0438_u0442_u0435_u043B_u044C_u043D_u043E_u0435__u0432_u0440_u0435_u043C_u044F" class="headerlink" title="Относительное время"></a>Относительное время</h3><p>Moment.js поддерживает вывод локализированной информации о том, сколько времени прошло/осталось с какого-то события. Удобно, если нужно использовать, например, при выводе информации о времени создания публикации в блоге или личного сообщения, например <code>User оставил вам сообщение 5 минут назад</code>:<br><figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moment(<span class="string">"20111031"</span>, <span class="string">"YYYYMMDD"</span>).fromNow(); <span class="comment">// 3 года назад</span></span><br><span class="line">moment(<span class="string">"20120620"</span>, <span class="string">"YYYYMMDD"</span>).fromNow(); <span class="comment">// 2 года назад</span></span><br><span class="line">moment().startOf(<span class="string">'day'</span>).fromNow();        <span class="comment">// 20 часов назад</span></span><br><span class="line">moment().endOf(<span class="string">'day'</span>).fromNow();          <span class="comment">// через 4 часа</span></span><br><span class="line">moment().startOf(<span class="string">'hour'</span>).fromNow();       <span class="comment">// 5 минут назад</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u0420_u0430_u0431_u043E_u0442_u0430__u0441__u0434_u0430_u0442_u0430_u043C_u0438"><a href="#u0420_u0430_u0431_u043E_u0442_u0430__u0441__u0434_u0430_u0442_u0430_u043C_u0438" class="headerlink" title="Работа с датами"></a>Работа с датами</h3><p>Библиотека позволяет не только форматировать даты, а еще вычитать или изменять их:<br><figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">moment().subtract(<span class="number">10</span>, <span class="string">'days'</span>).calendar(); <span class="comment">// 24.08.2014</span></span><br><span class="line">moment().subtract(<span class="number">6</span>, <span class="string">'days'</span>).calendar();  <span class="comment">// В прошлый четверг в 20:07</span></span><br><span class="line">moment().subtract(<span class="number">3</span>, <span class="string">'days'</span>).calendar();  <span class="comment">// В прошлое воскресенье в 20:07</span></span><br><span class="line">moment().subtract(<span class="number">1</span>, <span class="string">'days'</span>).calendar();  <span class="comment">// Вчера в 20:07</span></span><br><span class="line">moment().calendar();                      <span class="comment">// Сегодня в 20:07</span></span><br><span class="line">moment().add(<span class="number">1</span>, <span class="string">'days'</span>).calendar();       <span class="comment">// Завтра в 20:07</span></span><br><span class="line">moment().add(<span class="number">3</span>, <span class="string">'days'</span>).calendar();       <span class="comment">// В субботу в 20:07</span></span><br><span class="line">moment().add(<span class="number">10</span>, <span class="string">'days'</span>).calendar();      <span class="comment">// 13.09.2014</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u0420_u0430_u0431_u043E_u0442_u0430__u0441__u0447_u0430_u0441_u043E_u0432_u044B_u043C_u0438__u043F_u043E_u044F_u0441_u0430_u043C_u0438"><a href="#u0420_u0430_u0431_u043E_u0442_u0430__u0441__u0447_u0430_u0441_u043E_u0432_u044B_u043C_u0438__u043F_u043E_u044F_u0441_u0430_u043C_u0438" class="headerlink" title="Работа с часовыми поясами"></a>Работа с часовыми поясами</h3><p>Помимо всего прочего, библиотека имеет подмодуль <a href="http://momentjs.com/timezone/" target="_blank" rel="external">Moment Timezone</a>, позволяющий работать с часовыми поясами:<br><figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jun = moment(<span class="string">"2014-06-01T12:00:00Z"</span>);</span><br><span class="line"><span class="keyword">var</span> dec = moment(<span class="string">"2014-12-01T12:00:00Z"</span>);</span><br><span class="line"></span><br><span class="line">jun.tz(<span class="string">'Australia/Sydney'</span>).format(<span class="string">'ha z'</span>);     <span class="comment">// 10pm EST</span></span><br><span class="line">dec.tz(<span class="string">'Australia/Sydney'</span>).format(<span class="string">'ha z'</span>);     <span class="comment">// 11pm EST</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Конвертация между часовыми поясами</span></span><br><span class="line"><span class="keyword">var</span> newYork    = moment.tz(<span class="string">"2014-06-01 12:00"</span>, <span class="string">"America/New_York"</span>);</span><br><span class="line"><span class="keyword">var</span> losAngeles = newYork.clone().tz(<span class="string">"America/Los_Angeles"</span>);</span><br><span class="line"><span class="keyword">var</span> london     = newYork.clone().tz(<span class="string">"Europe/London"</span>);</span><br><span class="line"></span><br><span class="line">newYork.format();    <span class="comment">// 2014-06-01T12:00:00-04:00</span></span><br><span class="line">losAngeles.format(); <span class="comment">// 2014-06-01T09:00:00-07:00</span></span><br><span class="line">london.format();     <span class="comment">// 2014-06-01T17:00:00+01:00</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a></li>
<li><a href="http://momentjs.com/timezone/" target="_blank" rel="external">Moment Timezone</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Очень часто необходимо работать с информацией типа времени и дат, обрабатывая их таким образом, как этого требует программа. Существует огромное множество решений, каждое из которых умеет выполнять какие-то информации с датами - одни лучше, другие хуже. Среди этого разнообразия существует библиотека <a href="http://momentjs.com/">Moment.js</a>, которая умеет больше, чем не умеет.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="Moment.js" scheme="http://asaskevich.github.io/tags/Moment-js/"/>
    
      <category term="Useful" scheme="http://asaskevich.github.io/tags/Useful/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grunt: автоматизация работы с JS проектами]]></title>
    <link href="http://asaskevich.github.io/2014/08/29/grunt-avtomatizatsiia-raboty-s-js-proiektami/"/>
    <id>http://asaskevich.github.io/2014/08/29/grunt-avtomatizatsiia-raboty-s-js-proiektami/</id>
    <published>2014-08-29T12:09:46.000Z</published>
    <updated>2016-01-16T16:05:02.326Z</updated>
    <content type="html"><![CDATA[<p>Порой очень лениво и сложно выполнять одни и те же задачи раз за разом. Согласитесь, пару раз проверить проект линтом, сделать сборку и минифицировать ее можно руками, но если делать это постоянно… Не самый лучший вариант. Для таких задач существуют специальные инструменты, автоматизирующие долгий и нудный процесс. Знакомтесь - Grunt!</p>
<a id="more"></a>
<h3 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h3><p>Прежде чем ставить Grunt, убедитесь, что у вас установлен Node.js. Если не установлен - следуйте <a href="http://nodejs.org/" target="_blank" rel="external">данной ссылке</a>, после чего можно перейти к процессу установки Grunt’a.<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g grunt-cli</span><br></pre></td></tr></table></figure></p>
<p>Следует заметить, что хоть данная команда подготавливает к использованию команду <code>grunt</code>, сам Grunt еще не установлен.<br>Также я установил <code>grunt-init</code>, который позволяет быстро и легко инициализировать проект по некоторому заданному шаблону:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g grunt-init</span><br></pre></td></tr></table></figure></p>
<p>Далее нужно перейти в папку <code>.grunt-init</code> (На Windows у меня <code>c:/Users/User/.grunt-init</code>), и там установить шаблон, например шаблон нового npm-модуля:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/gruntjs/grunt-init-node.git node</span><br></pre></td></tr></table></figure></p>
<h3 id="u0421_u043E_u0437_u0434_u0430_u043D_u0438_u0435__u043F_u0440_u043E_u0435_u043A_u0442_u0430"><a href="#u0421_u043E_u0437_u0434_u0430_u043D_u0438_u0435__u043F_u0440_u043E_u0435_u043A_u0442_u0430" class="headerlink" title="Создание проекта"></a>Создание проекта</h3><p>Так как я сразу поставил утилиту инициализации нового проекта, мне не придется руками прописывать всю информацию в <code>Gruntfile.js</code>, я всего лишь выполню <code>grunt-init node</code>. После чего мне будет создан проект со следующей структурой (может отличаться):<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">  |-  lib</span><br><span class="line">  |   |-  File.js</span><br><span class="line">  |- <span class="built_in">test</span></span><br><span class="line">  |   |-  File_test.js</span><br><span class="line">  |- node_modules</span><br><span class="line">  |   |- папки зависимостей проекта</span><br><span class="line">  |-  .gitignore</span><br><span class="line">  |-  .jshintrc</span><br><span class="line">  |-  Gruntfile.js</span><br><span class="line">  |-  package.json</span><br><span class="line">  |-  README.md</span><br></pre></td></tr></table></figure></p>
<p>Как видим, всю работу мы проводим в <code>File.js</code>, тесты пишем в <code>File_test.js</code>, конфигурируем проект в <code>package.json</code>, настраиваем Grunt в <code>Gruntfile.js</code> и так далее.</p>
<h3 id="u0417_u0430_u043F_u0443_u0441_u043A"><a href="#u0417_u0430_u043F_u0443_u0441_u043A" class="headerlink" title="Запуск"></a>Запуск</h3><p>В папке проекта сначала нужно выполнить локальную установку Grunt:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt --save-dev</span><br></pre></td></tr></table></figure></p>
<p>Затем уже можно выполнять <code>grunt</code>. Если система сообщает об отсутствии каких-то компонентов, нужно их также установить, например:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-uglify --save-dev</span><br></pre></td></tr></table></figure></p>
<h3 id="u0414_u043E_u0431_u0430_u0432_u043B_u0435_u043D_u0438_u0435__u0437_u0430_u0434_u0430_u0447"><a href="#u0414_u043E_u0431_u0430_u0432_u043B_u0435_u043D_u0438_u0435__u0437_u0430_u0434_u0430_u0447" class="headerlink" title="Добавление задач"></a>Добавление задач</h3><p>Так как Grunt работает в первую очередь с задачами, стоит научиться их конфигурировать и создавать. В качестве примера добавим минификацию готового проекта. Данную задачу решает <code>grunt-contrib-uglify</code> из примера выше. Так как командой из примера выше мы уже узнали, как ставить локально новые зависимости, мы можем перейти непосредственно к редактированию <code>Gruntfile.js</code>. Добавим задачу:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure></p>
<p>Затем сконфигурируем:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Данный кусок кода находится внутри grunt.initConfig(&#123; ... &#125;);</span></span><br><span class="line">uglify: &#123;</span><br><span class="line">	dist: &#123;</span><br><span class="line">		src: <span class="string">'&lt;%= concat.dist.dest %&gt;'</span>,</span><br><span class="line">		dest: <span class="string">'dist/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>Добавляем задачу в набор задач, выполняемых по умолчанию:<br><figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default task.</span></span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'nodeunit'</span>, <span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>Если все сделано верно, при следующем запуске <code>grunt</code> мы получим на выходе минифицированный файл проекта.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Если ваш проект еще не настроен для работы с средствами автоматической сборки, менеджерами задач, лучше это сделать сейчас. Таким образом получится сэкономить много времени, которое, вместо того, чтобы быть потраченым на ненужные мелочи, будет потрачено с толком и гораздо большей пользой.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://gruntjs.com" target="_blank" rel="external">Grunt</a></li>
<li><a href="http://gruntjs.com/getting-started" target="_blank" rel="external">Grunt: Getting Started</a></li>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Порой очень лениво и сложно выполнять одни и те же задачи раз за разом. Согласитесь, пару раз проверить проект линтом, сделать сборку и минифицировать ее можно руками, но если делать это постоянно… Не самый лучший вариант. Для таких задач существуют специальные инструменты, автоматизирующие долгий и нудный процесс. Знакомтесь - Grunt!</p>]]>
    
    </summary>
    
      <category term="Grunt" scheme="http://asaskevich.github.io/tags/Grunt/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GCJ: Java без JVM]]></title>
    <link href="http://asaskevich.github.io/2014/08/28/gcj-java-biez-jvm/"/>
    <id>http://asaskevich.github.io/2014/08/28/gcj-java-biez-jvm/</id>
    <published>2014-08-28T12:19:31.000Z</published>
    <updated>2016-01-16T16:05:07.126Z</updated>
    <content type="html"><![CDATA[<p>Да, именно так: Java без JVM. В данной статье рассмотрим работу с Java (компиляция/запуск), не используя такие средства, как JVM/JDK и подобное. Ах да, и никаких on-line инструментов, все только локально :) А воспользуемся мы таким инструментом, как GCJ:</p>
<blockquote>
<p>GNU Compiler for Java (GCJ или gcj) — это свободный компилятор языка Java, являющийся частью GNU Compiler Collection. GCJ может компилировать исходный код Java в байткод виртуальной машины Java, либо непосредственно в машинный код многих процессорных архитектур. Он также может компилировать файлы классов, содержащие байткод, или целые JAR, содержащие такие файлы, в машинный код.</p>
</blockquote>
<a id="more"></a>
<h3 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h3><p>В unix-системах достаточно выполнить команду установки пакета <code>apt-get</code>:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install gcj-jdk</span><br></pre></td></tr></table></figure></p>
<p>В результате будет скачано и установлено около десяти мегабайт ресурсов. После чего инструмент готов к использованию.</p>
<h3 id="u0418_u0441_u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u043D_u0438_u0435"><a href="#u0418_u0441_u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u043D_u0438_u0435" class="headerlink" title="Использование"></a>Использование</h3><p>Пишем Java код, компилируем в бинарник и запускаем:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">asaskevich@asaskevich-U31SD:~$ cat &gt; Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		System.out.println(<span class="string">"Hi from gcj!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">^C</span><br><span class="line">asaskevich@asaskevich-U31SD:~$ gcj --main=Test Test.java</span><br><span class="line">asaskevich@asaskevich-U31SD:~$ ./a.out</span><br><span class="line">Hi from gcj!</span><br></pre></td></tr></table></figure></p>
<p>Строка <code>--main=Test</code> говорит о том, что точка входа в приложение находится в классе <code>Test</code>.</p>
<h3 id="u041F_u043B_u044E_u0441_u044B"><a href="#u041F_u043B_u044E_u0441_u044B" class="headerlink" title="Плюсы"></a>Плюсы</h3><ul>
<li>Не требует установки JVM для запуска</li>
<li>Только машинный код</li>
<li>Преобразует в машинный код файлы типа <code>*.java *.jar *.class</code></li>
<li>Приложение запускается быстрее, чем через JVM</li>
</ul>
<h3 id="u041C_u0438_u043D_u0443_u0441_u044B"><a href="#u041C_u0438_u043D_u0443_u0441_u044B" class="headerlink" title="Минусы"></a>Минусы</h3><ul>
<li>Код исполняется не всегда быстрее, чем байт-код в JVM</li>
<li>Размер выходного файла обычно больше аналогичного <code>*.class</code> файла</li>
<li>Применение бинарника ограничено платформой, для которой файл был скомпилирован</li>
</ul>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Конечно, плюсов и минусов может быть больше - я лишь поверхностно рассмотрел данный вопрос. Использовать JVM/JDK все же привычнее, но не стоит упускать из вида и данный инструмент - например, если вдруг придется писать приложение для устройства, ограниченного в ресурсах, а для этих целей хочется использовать язык, который знаешь лучше всего (в данном случае Java).</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="https://gcc.gnu.org/onlinedocs/gcj/index.html" target="_blank" rel="external">Документация GCJ</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Да, именно так: Java без JVM. В данной статье рассмотрим работу с Java (компиляция/запуск), не используя такие средства, как JVM/JDK и подобное. Ах да, и никаких on-line инструментов, все только локально :) А воспользуемся мы таким инструментом, как GCJ:</p>
<blockquote>
<p>GNU Compiler for Java (GCJ или gcj) — это свободный компилятор языка Java, являющийся частью GNU Compiler Collection. GCJ может компилировать исходный код Java в байткод виртуальной машины Java, либо непосредственно в машинный код многих процессорных архитектур. Он также может компилировать файлы классов, содержащие байткод, или целые JAR, содержащие такие файлы, в машинный код.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C" scheme="http://asaskevich.github.io/tags/C/"/>
    
      <category term="GCJ" scheme="http://asaskevich.github.io/tags/GCJ/"/>
    
      <category term="Java" scheme="http://asaskevich.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://asaskevich.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello, Octopress!]]></title>
    <link href="http://asaskevich.github.io/2014/08/26/hello/"/>
    <id>http://asaskevich.github.io/2014/08/26/hello/</id>
    <published>2014-08-26T10:00:46.000Z</published>
    <updated>2016-01-16T16:05:13.442Z</updated>
    <content type="html"><![CDATA[<p>Данный пост не имеет особой значимости - я всего-то переменил движок. На этот раз мой выбор пал на Octopress - он показался мне более функциональным и мощным инструментом по сравнению с Jekyll, который я использовал ранее (Хотя бы потому что он является надстройкой над Jekyll).<br>Использование Октопреса сводится к применению нескольких команд:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rake new_post[title]</span><br><span class="line">$ rake generate</span><br><span class="line">$ rake deploy</span><br></pre></td></tr></table></figure></p>
<p>По сравнению с Jekyll, имеет улучшенную поддержку плагинов, тем, многие средства, которые в Jekyll отключены, здесь используются по умолчанию (например пагинация или “убирание” постов “под кат”).<br><a id="more"></a><br>Встроенная поддержка Markdown просто замечательна - набирать текст легко и удобно. Чаще всего, написав саму статью, достаточно потратить минуты три, дабы отформатировать содержимое. Естественно, это не единственный плюс Octopress, их вообще можно перечислять и перечислять, но этим я пока заниматься не собираюсь. Просто советую данный движок к использованию в своем блоге.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://octopress.org/" target="_blank" rel="external">Octopress</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Данный пост не имеет особой значимости - я всего-то переменил движок. На этот раз мой выбор пал на Octopress - он показался мне более функциональным и мощным инструментом по сравнению с Jekyll, который я использовал ранее (Хотя бы потому что он является надстройкой над Jekyll).<br>Использование Октопреса сводится к применению нескольких команд:<br><figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rake new_post[title]</span><br><span class="line">$ rake generate</span><br><span class="line">$ rake deploy</span><br></pre></td></tr></table></figure></p>
<p>По сравнению с Jekyll, имеет улучшенную поддержку плагинов, тем, многие средства, которые в Jekyll отключены, здесь используются по умолчанию (например пагинация или “убирание” постов “под кат”).<br>]]>
    
    </summary>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="Octopress" scheme="http://asaskevich.github.io/tags/Octopress/"/>
    
      <category term="Blog" scheme="http://asaskevich.github.io/categories/Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Backbone.js: маршрутизаторы]]></title>
    <link href="http://asaskevich.github.io/2014/08/25/backbonejs-/"/>
    <id>http://asaskevich.github.io/2014/08/25/backbonejs-/</id>
    <published>2014-08-24T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:15.886Z</updated>
    <content type="html"><![CDATA[<p>В данной маленькой заметке рассмотрю примеры использования маршрутизаторов Backbone.<br>Часто в веб-приложении необходимо разделить логику, привязав определенные модели и представления или отдельное состояние приложения к определенным адресам. Для всего этого используется объект <code>Backbone.Router</code></p>
<a id="more"></a>
<h3 id="u041E_u043F_u0438_u0441_u0430_u043D_u0438_u0435__u043C_u0430_u0440_u0448_u0440_u0443_u0442_u043E_u0432"><a href="#u041E_u043F_u0438_u0441_u0430_u043D_u0438_u0435__u043C_u0430_u0440_u0448_u0440_u0443_u0442_u043E_u0432" class="headerlink" title="Описание маршрутов"></a>Описание маршрутов</h3><p>Создавая свой маршрутизатор, нужно расширить <code>Backbone.Router</code>, добавив в него описания маршрутов и действий:</p>
<figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppRouter = Backbone.Router.extend(&#123;</span><br><span class="line">    routes: &#123;</span><br><span class="line">        <span class="string">"someroute"</span>: <span class="string">"routeAction"</span>, <span class="comment">// Соответствует некоторому адресу #someroute и событию routeAction</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Сами маршруты могут быть динамическими:</p>
<figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"search"</span>           <span class="comment">// Например #search</span></span><br><span class="line"><span class="string">"search/:q"</span>        <span class="comment">// Например #search/query</span></span><br><span class="line"><span class="string">"search/:q/p:page"</span> <span class="comment">// Например #search/find_me_something/p10</span></span><br><span class="line"><span class="string">"download/*path"</span>   <span class="comment">// Например #download/path/to/file.txt</span></span><br></pre></td></tr></table></figure>
<h3 id="u0421_u0432_u044F_u0437_u044B_u0432_u0430_u043D_u0438_u0435__u043C_u0430_u0440_u0448_u0440_u0443_u0442_u043E_u0432__u0438__u0434_u0435_u0439_u0441_u0442_u0432_u0438_u0439"><a href="#u0421_u0432_u044F_u0437_u044B_u0432_u0430_u043D_u0438_u0435__u043C_u0430_u0440_u0448_u0440_u0443_u0442_u043E_u0432__u0438__u0434_u0435_u0439_u0441_u0442_u0432_u0438_u0439" class="headerlink" title="Связывание маршрутов и действий"></a>Связывание маршрутов и действий</h3><p>Используя функцию <code>on</code> мы должны связать событие перехода по некоторому адресу с некоторым действием. Так, описав в списке маршрутов:</p>
<figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"profile/:id"</span>: <span class="string">"viewProfile"</span></span><br></pre></td></tr></table></figure>
<p>необходимо описать событие:</p>
<figure class="highlight javascript"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.on(<span class="string">'route:viewProfile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Going to #/profile/:id, where :id = "</span> + id);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Это означает, что при переходе по адресу <code>#/profile/10</code> будет генерироваться событие <code>route:viewProfile</code>, которое будет обработано соответствующей функцией, принимающей в качестве аргументов <code>id</code> маршрута.<br>Во время загрузки страницы, после того, как приложение создаст все необходимые ему маршрутизаторы, нужно вызвать <code>Backbone.history.start()</code> или <code>Backbone.history.start({pushState: true})</code>, чтобы задать начальное состояние приложения.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Как видим, достаточно просто описать все необходимые действия приложения, пользуясь только маршрутизаторами, не используя дополнительные страницы или скрипты.</p>
<h4 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h4><ul>
<li><a href="http://backbonejs.ru/" target="_blank" rel="external">Документация Backbone.js</a></li>
<li><a href="http://underscorejs.ru/" target="_blank" rel="external">Документация underscore.js</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Короткая заметка о маршрутизаторах Backbone.js]]>
    
    </summary>
    
      <category term="Backbone" scheme="http://asaskevich.github.io/tags/Backbone/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="Routers" scheme="http://asaskevich.github.io/tags/Routers/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jekyll: создание блога]]></title>
    <link href="http://asaskevich.github.io/2014/08/18/jekyll--/"/>
    <id>http://asaskevich.github.io/2014/08/18/jekyll--/</id>
    <published>2014-08-18T09:27:46.000Z</published>
    <updated>2016-01-16T16:05:20.251Z</updated>
    <content type="html"><![CDATA[<p>В установке и настройке Jekyll весьма легок и прост. Его можно развернуть буквально за пару минут. Разберем, как это сделать.</p>
<a id="more"></a>
<h3 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h3><ul>
<li>Создаем репозиторий на GitHub с названием <code>username.github.com</code></li>
<li>Копируем репозиторий с системой:</li>
</ul>
<figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/plusjade/jekyll-bootstrap.git username.github.com</span><br></pre></td></tr></table></figure>
<ul>
<li>Заливаем локальный репозиторий на сервер:</li>
</ul>
<figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> username.github.com</span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:username/username.github.com.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<ul>
<li>Через пару минут все будет готово!</li>
</ul>
<!-- more -->
<h3 id="u041D_u0430_u0441_u0442_u0440_u043E_u0439_u043A_u0430"><a href="#u041D_u0430_u0441_u0442_u0440_u043E_u0439_u043A_u0430" class="headerlink" title="Настройка"></a>Настройка</h3><p>Файл <code>_config.yml</code> хранит в себе основные параметры: название сайта, адрес, активный плагин комментариев и аналитики, контакты владельца и прочая информация.<br>Следует данный файл настроить под себя, дабы не было неожиданных ошибок.</p>
<h3 id="u0422_u0435_u043C_u044B"><a href="#u0422_u0435_u043C_u044B" class="headerlink" title="Темы"></a>Темы</h3><p>Дизайн блога легко настраивается. Если вас не устраивает исходный дизайн, всегда можно заменить его другим. Основные темы расположены <a href="http://themes.jekyllbootstrap.com/" target="_blank" rel="external">тут</a></p>
<h3 id="u0421_u043E_u0437_u0434_u0430_u043D_u0438_u0435__u043D_u043E_u0432_u043E_u0439__u0437_u0430_u043F_u0438_u0441_u0438"><a href="#u0421_u043E_u0437_u0434_u0430_u043D_u0438_u0435__u043D_u043E_u0432_u043E_u0439__u0437_u0430_u043F_u0438_u0441_u0438" class="headerlink" title="Создание новой записи"></a>Создание новой записи</h3><p>Для создания новой записи достаточно выполнить команду:</p>
<figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake post title=<span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>После ее выполнения вы найдете файл <code>_posts\YYYY-MM-DD-title.md</code> - файл новой записи в блоге, которую после нужно подредактировать - оформить содержимое, теги, описание и категории. А в конце просто залить все на git.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Конечно, я рассказал максимально сжато, но надеюсь, что этой информации окажется достаточно, чтобы запустить свой блог на GitHub Pages. Я оформил этот блог буквально за один вечер, или около 3 часов (установка, настройка, редизайн, локализация, основной контент).</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://jekyllbootstrap.com/" target="_blank" rel="external">Jekull Bootstrap</a></li>
<li><a href="http://jekyllbootstrap.com/usage/jekyll-quick-start.html" target="_blank" rel="external">Jekull QuickStart</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>В установке и настройке Jekyll весьма легок и прост. Его можно развернуть буквально за пару минут. Разберем, как это сделать.</p>]]>
    
    </summary>
    
      <category term="Jekyll" scheme="http://asaskevich.github.io/tags/Jekyll/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="Blog" scheme="http://asaskevich.github.io/categories/Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JNI: объединяем C и Java]]></title>
    <link href="http://asaskevich.github.io/2014/08/17/jni--c--java/"/>
    <id>http://asaskevich.github.io/2014/08/17/jni--c--java/</id>
    <published>2014-08-16T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:26.085Z</updated>
    <content type="html"><![CDATA[<p>Что такое JNI?</p>
<blockquote>
<p>Java Native Interface (JNI) — стандартный механизм для запуска кода, который написан на языках С/С++ или Ассемблера, и скомпонован в виде динамических библиотек, позволяет не использовать статическое связывание. Это даёт возможность вызова функции С/С++ из программы на Java, и наоборот.</p>
</blockquote>
<p>Если говорить кратко, JNI - механизм, связывающий Java и C/C++ в одно целое.</p>
<a id="more"></a>
<h3 id="u041A_u0430_u043A__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u044C_u0441_u044F_3A_Java"><a href="#u041A_u0430_u043A__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u044C_u0441_u044F_3A_Java" class="headerlink" title="Как пользоваться: Java"></a>Как пользоваться: Java</h3><p>Со стороны Java нам нужно описать класс, загружающий динамическую библиотеку и имеющий в себе описание функций, расположенных в библиотеке:</p>
<figure class="highlight java"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">"Library"</span>); <span class="comment">// Будет загружать Library.o или Library.dll в зависимости от ОС</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Данные функции объявлены с модификатором native</span></span><br><span class="line"><span class="comment">// Это значит, что они расположены в динамической библиотеке</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">libraryFunc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">libraryFunc</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="u041A_u0430_u043A__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u044C_u0441_u044F_3A__u0421"><a href="#u041A_u0430_u043A__u043F_u043E_u043B_u044C_u0437_u043E_u0432_u0430_u0442_u044C_u0441_u044F_3A__u0421" class="headerlink" title="Как пользоваться: С"></a>Как пользоваться: С</h3><p>Следующим этапом необходимо создать заголовочный файл библиотеки для дальнейшей работы с динамической библиотекой:</p>
<figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac -g Main.java</span><br><span class="line">javah -jni Main</span><br></pre></td></tr></table></figure>
<p>После выполнения данных команд в терминале мы получим файл <code>Main.h</code> примерно такого содержания:</p>
<figure class="highlight cpp"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class Main */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> _Included_Main</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _Included_Main</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     Main</span><br><span class="line"> * Method:    libraryFunc</span><br><span class="line"> * Signature: ()V</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_Main_libraryFunc</span></span><br><span class="line">  <span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>Как видим, в нашем заголовочном файле уже описана функция <code>Java_Main_libraryFunc</code>, которая расположена в классе <code>Main</code> и называется <code>libraryFunc</code>. В динамической библиотеке функция принимает дополнительные аргументы - окружение и класс.<br>Переходим к файлу <code>Main.c</code>, в котором опишем реализацию функции <code>Java_Main_libraryFunc</code>:</p>
<figure class="highlight cpp"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"Main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_Main_libraryFunc</span><span class="params">(JNIEnv *env, jobject obj)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Native code executed!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Теперь этот небольшой модуль нужно скомпилировать в динамическую библиотеку:</p>
<figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -std=c99 -Wl,--add-stdcall-alias -I<span class="string">"&lt;JAVA_HOME&gt;\include"</span> -I<span class="string">"&lt;JAVA_HOME&gt;\include\win32"</span> -shared -o Library.dll</span><br></pre></td></tr></table></figure>
<p>Также нужно иметь ввиду, что разрядность библиотеки должна быть такой же, как и разрядность JVM.</p>
<h3 id="u0421_u0432_u044F_u0437_u044B_u0432_u0430_u0435_u043C__u0432_u043C_u0435_u0441_u0442_u0435"><a href="#u0421_u0432_u044F_u0437_u044B_u0432_u0430_u0435_u043C__u0432_u043C_u0435_u0441_u0442_u0435" class="headerlink" title="Связываем вместе"></a>Связываем вместе</h3><p>После того, как библиотека скомпилирована, достаточно загрузить ее и вызвать нужную функцию:</p>
<figure class="highlight java"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">"Library"</span>);</span><br><span class="line">libraryFunc();</span><br></pre></td></tr></table></figure>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>JNI - отличное средство для более близкого взаимодействия с системой. Все, что нельзя сделать средствами чистой Java, можно сделать на С/С++ и вызвать из Java. Единственным вопросом остается производительность - в каких случаях стоит обратиться к нативному коду, а в каких достаточно воспользоваться стандартными средствами.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/" target="_blank" rel="external">Java Native Interface</a></li>
<li><a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html" target="_blank" rel="external">JNI - Tutorial</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Когда обычных средств Java не хватает, на помощь приходит JNI, который я описал вкратце в данной статье.]]>
    
    </summary>
    
      <category term="C" scheme="http://asaskevich.github.io/tags/C/"/>
    
      <category term="C++" scheme="http://asaskevich.github.io/tags/C/"/>
    
      <category term="JNI" scheme="http://asaskevich.github.io/tags/JNI/"/>
    
      <category term="Java" scheme="http://asaskevich.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://asaskevich.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS: Sails.js + Backbone.js = Hello, TODO]]></title>
    <link href="http://asaskevich.github.io/2014/08/14/js-sailsjs--backbonejs--hello-todo/"/>
    <id>http://asaskevich.github.io/2014/08/14/js-sailsjs--backbonejs--hello-todo/</id>
    <published>2014-08-13T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:29.020Z</updated>
    <content type="html"><![CDATA[<p>Сегодня я решил - пора взяться за веб со стороны Node.js. А именно я решил присмотреться, каково вообще вести разработку на серверном JavaScript. В качестве серверного фреймворка я взял Sails.js - он мне приглянулся хорошей документацией и наличием некоторого количества примеров. В связке с ним я взял Backbone.js для клиентской части - после первого знакомства стоит поработать с ним поглубже. А общей целью поставил написать небольшой ToDo менеджер. Поехали!</p>
<a id="more"></a>
<h3 id="u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430"><a href="#u0423_u0441_u0442_u0430_u043D_u043E_u0432_u043A_u0430" class="headerlink" title="Установка"></a>Установка</h3><p>Про установку и настройку серверной части говорить не интересно, потому приведу команды, которые я выполнил в консоли (предварительно установив node.js и npm):</p>
<figure class="highlight bash"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sails</span><br><span class="line">sails new todo</span><br><span class="line"><span class="built_in">cd</span> todo</span><br><span class="line">sails generate api Task</span><br><span class="line">sails generate controller Main</span><br></pre></td></tr></table></figure>
<p>Обращу внимание на то, что я сделал в конце: я создал новое приложение <code>todo</code>, sails любезно создал всю структуру файлов, затем я создал API: шаблон для модели <code>Task</code> и соответствующий ему RESTful контроллер, а также контроллер <code>Main</code>. Все это интересно и непонятно. <code>Task</code> будет хранить информацию о задачах, а контроллер выводить страницу с их списком. Создав модель, sails так же любезно создал нам набор RESTful API с CRUD методами так, что уже сейчас, запустив приложение и перейдя по адресу <code>localhost:1337/Task/</code> можем увидеть все модели <code>Task</code>. Скажем, не модели, а объекты.</p>
<h3 id="u041C_u043E_u0434_u0435_u043B_u044C_Task"><a href="#u041C_u043E_u0434_u0435_u043B_u044C_Task" class="headerlink" title="Модель Task"></a>Модель <code>Task</code></h3><p>Далее идем в <code>api\models\Task.js</code>, где создаем все поля для модели. Нам хватит поля текста задачи и логического поля, выражающего завершенность задачи:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	attributes: &#123;</span><br><span class="line">	  <span class="comment">// Поле complete</span></span><br><span class="line">		complete: &#123;</span><br><span class="line">			type: <span class="string">"boolean"</span>,</span><br><span class="line">			defaultsTo: <span class="literal">false</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">// Поле text</span></span><br><span class="line">		text: &#123;</span><br><span class="line">			type: <span class="string">"string"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>В принципе тут мы со всем разобрались. У нас есть два поля, мы определили их название и типы. Перейдем к контроллеру.</p>
<h3 id="u041A_u043E_u043D_u0442_u0440_u043E_u043B_u043B_u0435_u0440_Main"><a href="#u041A_u043E_u043D_u0442_u0440_u043E_u043B_u043B_u0435_u0440_Main" class="headerlink" title="Контроллер Main"></a>Контроллер <code>Main</code></h3><p>Идем в <code>api\controllers\MainController.js</code>. Там создаем следующее содержимое:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> 	index: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> 		res.view();</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Теперь заглянем в <code>confir\routes.js</code>. Здесь мы прописываем, что хотим вызывать функцию <code>index</code> из нашего контроллера по запросу корня сайта (За нас конечно уже прописан шаблон <code>homepage</code>, но ведь это не то, что мы хотим), потому делаем так:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.routes = &#123;</span><br><span class="line">  <span class="string">'/'</span> : &#123;</span><br><span class="line">    controller: <span class="string">'main'</span>,</span><br><span class="line">    action: <span class="string">'index'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Попробуем все это дело запустить. Выполняем <code>sails lift</code> и получаем ошибку, что у нас не стоит адаптер <code>sails-disk</code> для работы с локальной БД. Ставим и пробуем еще раз. Запустилось! Переходим на сайт и получаем ошибку - не задан шаблон для контроллера.</p>
<h3 id="u0428_u0430_u0431_u043B_u043E_u043D_u044B"><a href="#u0428_u0430_u0431_u043B_u043E_u043D_u044B" class="headerlink" title="Шаблоны"></a>Шаблоны</h3><p>Создадим в папке <code>view\main\</code> файл <code>index.ejs</code> - файл нашего будущего шаблона. Собственно название шаблона мы могли прописать сразу в роутере, но через контроллер нагляднее и интереснее. Содержимое файла будет следующим:</p>
<figure class="highlight html"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>ToDo<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span>&gt;</span>Записей: <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">count</span> %&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"new_todo"</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"new"</span>&gt;</span><span class="tag">&lt;/<span class="title">input</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"add"</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tasks"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Обратим внимание на <code>&lt;%= count %&gt;</code> - это параметр, который мы передадим в контроллере вот так:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.view( &#123;count: ___&#125; );</span><br></pre></td></tr></table></figure>
<p>Где вместо пропуска будет получение общего количества записей.</p>
<h3 id="u041A_u043B_u0438_u0435_u043D_u0442_u0441_u043A_u0430_u044F__u0447_u0430_u0441_u0442_u044C"><a href="#u041A_u043B_u0438_u0435_u043D_u0442_u0441_u043A_u0430_u044F__u0447_u0430_u0441_u0442_u044C" class="headerlink" title="Клиентская часть"></a>Клиентская часть</h3><p>Для начала подключим все необходимые библиотеки:</p>
<figure class="highlight html"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Создадим нашу модель, указав адрес, по которому она обрабатывается:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TaskModel = Backbone.Model.extend(&#123;</span><br><span class="line">	urlRoot: <span class="string">'/Task'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Далее нужно описать коллекцию, которая хранит все модели:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TaskCollection = Backbone.Collection.extend(&#123;</span><br><span class="line">	url: <span class="string">'/Task'</span>,</span><br><span class="line">	model: TaskModel,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Проинициализируем коллекцию и загрузим ее с сервера:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> TaskCollection();</span><br><span class="line">tasks.fetch();</span><br></pre></td></tr></table></figure>
<p>Далее привяжем к нашей кнопке событие добавления записи:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#add"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> taskText = $(<span class="string">"#task"</span>).val();</span><br><span class="line">	tasks.create(&#123;text: taskText&#125;, &#123;wait: <span class="literal">true</span>&#125;);</span><br><span class="line">	$(<span class="string">"#task"</span>).val(<span class="string">""</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Теперь осталось описать вид и рендер коллекции. Шаблон будет таким: <code>{{  }}</code>, дабы не было конфликтов с шаблонами Sails.js:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_.templateSettings = &#123;</span><br><span class="line">	interpolate : <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Теперь осталось самую малость - описать вид:</p>

<!--￼12-->


<p>Все, создаем объект вида и тестируем: <code>var mView = new TaskView({collection: tasks});</code>. Кнопка добавления добавляет новую запись сразу в коллекцию, а также синхронизируется с сервером, потому, если перезагрузить страницу, данные никуда не пропадут. Конечно, стоит позаботиться о серверной части, дабы в реальном приложении нельзя было удалить записи из базы, просто перейдя по нужной ссылке API.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Скажу просто - это круто. Никаких особых заморочек с БД, нету особых сложностей с клиентской частью, да и с серверной. По сути - описать контроллеры, модели, шаблоны, сделать их связку, описать работу моделей и коллекций в клиентской части - и все готово. Ради интереса гляну еще некоторые MVC фреймворки, не только для Node.js, но и для других языков.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://sailsjs.org/#/" target="_blank" rel="external">Sails.js</a></li>
<li><a href="http://backbonejs.org/" target="_blank" rel="external">Backbone.js</a></li>
<li><a href="http://code.tutsplus.com/tutorials/working-with-data-in-sailsjs--net-31525" target="_blank" rel="external">Working With Data in Sails.js</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Начнем изучение сразу трех технологий: Node.js, Sails.js и Backbone.js]]>
    
    </summary>
    
      <category term="Backbone.js" scheme="http://asaskevich.github.io/tags/Backbone-js/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="Node.js" scheme="http://asaskevich.github.io/tags/Node-js/"/>
    
      <category term="Sails.js" scheme="http://asaskevich.github.io/tags/Sails-js/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS: Backbone.js, say Hello]]></title>
    <link href="http://asaskevich.github.io/2014/08/12/js-backbonejs-say-hello/"/>
    <id>http://asaskevich.github.io/2014/08/12/js-backbonejs-say-hello/</id>
    <published>2014-08-11T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:31.677Z</updated>
    <content type="html"><![CDATA[<p>Пусть для JavaScript’a существует достаточное число фреймворков, создавать динамические веб-приложения все же достаточно сложно. А когда дело доходит до работы с DOM, событиями и прочими прелестями HTML, JS и CSS, то код становится нереально большим и сложным в поддержке. Backbone призван решить эту проблему. Как написано на сайте русской документации Backbone:</p>
<blockquote>
<p>Backbone.js придает структуру веб-приложениям с помощью моделей с биндингами по ключу и пользовательскими событиями, коллекций с богатым набором методов с перечислимыми сущностями, представлений с декларативной обработкой событий; и соединяет это все с вашим существующим REST-овым JSON API.</p>
</blockquote>
<p>Что ж, было бы неплохо попробовать его в действии.</p>
<a id="more"></a>
<h3 id="u041E_u0441_u043D_u043E_u0432_u0430"><a href="#u041E_u0441_u043D_u043E_u0432_u0430" class="headerlink" title="Основа"></a>Основа</h3><p>За HTML-основу один из сайтов предлагает следующее:</p>
<figure class="highlight html"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdnjs.cloudflare.com/ajax/libs/backbone-localstorage.js/1.0/backbone.localStorage-min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Все необходимое подключено и мы можем начать наши эксперименты.</p>
<h3 id="u0421_u0432_u044F_u0437_u044B_u0432_u0430_u043D_u0438_u0435__u0432_u0438_u0434_u0430__u0438__u0435_u0433_u043E__u0440_u0435_u043D_u0434_u0435_u0440_u0430"><a href="#u0421_u0432_u044F_u0437_u044B_u0432_u0430_u043D_u0438_u0435__u0432_u0438_u0434_u0430__u0438__u0435_u0433_u043E__u0440_u0435_u043D_u0434_u0435_u0440_u0430" class="headerlink" title="Связывание вида и его рендера"></a>Связывание вида и его рендера</h3><p>Фреймворк позволяет назначать DOM элементам свои шаблоны, рендер и многое другое. Давайте попробуем.<br>Для начала создадим DOM элемент:</p>
<figure class="highlight html"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example"</span>&gt;</span>Example<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Перейдем к JS. Для начала создадим пустой вид:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">  <span class="comment">// el - наш элемент, с которым ассоциирован вид, в данном случае &lt;div&gt; с id "example"</span></span><br><span class="line">  el: <span class="string">'#example'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Затем нам необходимо указать функцию рендера:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">    <span class="comment">// el - наш элемент, с которым ассоциирован вид, в данном случае &lt;div&gt; с id "example"</span></span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    <span class="comment">// $el - объект jQuery, потому к нему могут быть применены любые функции jQuery,</span></span><br><span class="line">    <span class="comment">// так например html()</span></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$el.html(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Но сама себя эта функция не вызовет, ее нужно вызвать, например при инициализации:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">    <span class="comment">// el - наш элемент, с которым ассоциирован вид, в данном случае &lt;div&gt; с id "example"</span></span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    <span class="comment">// Эта функция вызывается при инициализации вида</span></span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// $el - объект jQuery, потому к нему могут быть применены любые функции jQuery,</span></span><br><span class="line">    <span class="comment">// так например html()</span></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$el.html(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Осталось создать объект вида для дальнейшей работы:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appView = <span class="keyword">new</span> AppView();</span><br></pre></td></tr></table></figure>
<h3 id="u0428_u0430_u0431_u043B_u043E_u043D_u044B"><a href="#u0428_u0430_u0431_u043B_u043E_u043D_u044B" class="headerlink" title="Шаблоны"></a>Шаблоны</h3><p>Так как Backbone жестко завязан на underscore.js, мы можем воспользоваться множеством различных утилит и функций из нее.  Так, например, мы можем использовать шаблоны. Синтаксис вызова такой: <code>_.template(шаблон, [данные], [параметры])</code>.<br>Итак, добавим в наш вид поле шаблона:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">  ...</span><br><span class="line">  template: _.template(<span class="string">"&lt;h3&gt;Hello &lt;%= who %&gt;&lt;h3&gt;"</span>),</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Обратите внимание на <code>&lt;%= who %&gt;</code>. Это параметр, который будет загружен из аргумента “данные”. Все, что нам нужно, вызвать шаблон в рендере. Например так:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template(&#123;who: <span class="string">'man!'</span>&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Разницы между <code>&lt;%= %&gt;</code> и <code>&lt;%- %&gt;</code> нету. Однако при помощи <code>&lt;% %&gt;</code> мы можем выполнять любой JS код.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Изначально кажется, что мы проделали слишком много действий лишь для того, чтобы вывести стандартную надпись <code>Hello World</code>. Да, это так. Но продолжив изучение фреймворка и используя его в крупном веб-приложении, мы несомненно увидим, что мы сохранили много времени и сил, не пытаясь изобретать велосипед при создании динамического приложения. Далее в планах познакомится с фреймворком глубже, а также обратить внимание на Angular.js - фреймворк с похожей задачей - упростить создание динамических веб-приложений.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://backbonejs.ru/" target="_blank" rel="external">Документация Backbone.js</a></li>
<li><a href="http://underscorejs.ru/" target="_blank" rel="external">Документация underscore.js</a></li>
<li><a href="http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/" target="_blank" rel="external">Backbone.js for Absolute Beginners</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Попробуем фреймворк Backbone.js в действии.]]>
    
    </summary>
    
      <category term="Backbone.js" scheme="http://asaskevich.github.io/tags/Backbone-js/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS & API: StackExchange API на пальцах]]></title>
    <link href="http://asaskevich.github.io/2014/08/11/js--api-stackexchange-api--/"/>
    <id>http://asaskevich.github.io/2014/08/11/js--api-stackexchange-api--/</id>
    <published>2014-08-10T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:34.121Z</updated>
    <content type="html"><![CDATA[<p>Иногда возникают ситуации, когда необходимо написать скрипт или приложение, взаимодействующее с каким-либо сервисом. Многие крупные сайты предлагают разработчикам свое API, которое они могут использовать в своих проектах. Однако у каждого сервиса свои функции и способы работы с API. Потому нередко сложно начать использовать сторонние API в своих проектах.</p>
<p>На примере небольшого приложения, авторизирующего пользователя и получающего его последние уведомления с данными профиля, мы рассмотрим, как пользоваться Stack Exchange API.</p>
<a id="more"></a>
<h3 id="u0420_u0435_u0433_u0438_u0441_u0442_u0440_u0430_u0446_u0438_u044F__u043D_u043E_u0432_u043E_u0433_u043E__u043F_u0440_u0438_u043B_u043E_u0436_u0435_u043D_u0438_u044F"><a href="#u0420_u0435_u0433_u0438_u0441_u0442_u0440_u0430_u0446_u0438_u044F__u043D_u043E_u0432_u043E_u0433_u043E__u043F_u0440_u0438_u043B_u043E_u0436_u0435_u043D_u0438_u044F" class="headerlink" title="Регистрация нового приложения"></a>Регистрация нового приложения</h3><p>Прежде чем создавать свое приложение, необходимо зарегистрировать его в StackApps. Это необходимо, чтобы получить ключи доступа для него. Переходим по <a href="/stackapps.com/apps/oauth/register">этой ссылке</a> и заполняем все поля, не помеченные пунктом optional. Для своего туториала я заполнил поля так:</p>
<p><img src="http://habrastorage.org/getpro/habr/post_images/81f/0d0/9c7/81f0d09c7cb9bbdf98d797e4e9247b43.png" alt=""></p>
<p>Не забываем поставить галочку в <code>«Enable Client Side OAuth Flow»</code>. Это необходимо для OAuth — иначе пользователь просто не сможет войти в систему, пользуясь приложением. Когда все заполнили, жмем соответствующую кнопку, и переходим на страницу управления приложением. Там мы получим несколько ключей (<code>Client Id</code>, <code>Client Secret</code>, <code>Key</code>). Из них для самого приложения нужны только <code>ClientId</code> и <code>Key</code>. Сохраняем их и на этом мы завершаем процесс регистрации и переходим непосредственно к написанию самого приложения.</p>
<h3 id="u041D_u0430_u0447_u0438_u043D_u0430_u0435_u043C"><a href="#u041D_u0430_u0447_u0438_u043D_u0430_u0435_u043C" class="headerlink" title="Начинаем"></a>Начинаем</h3><p>Создадим новый чистый HTML файл и сразу подключим в нем скрипт:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">'text/javascript'</span> src=<span class="string">'https://api.stackexchange.com/js/2.0/all.js'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Теперь мы можем воспользоваться базовыми функциями инициализации и авторизации для дальнейшей работы. Помимо <code>key</code> и <code>clientId</code>, для инициализации нам необходимо передать два дополнительных параметра - домен и callback-функция:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SE.init(&#123;</span><br><span class="line">    clientId: <span class="number">1</span>, <span class="comment">// Здесь мы ставим выданный нам clientId</span></span><br><span class="line">    key: <span class="string">'YoUrAweSomeKey'</span>, <span class="comment">// А здесь соответственно key</span></span><br><span class="line">    channelUrl: <span class="string">'http://example.com/'</span>, <span class="comment">// Особое внимание стоит уделить этому полю. Здесь нужно указать домен, на котором хостится и крутится приложение</span></span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; alert(<span class="string">"Я загрузился!"</span>); &#125; <span class="comment">// Здесь мы указываем некоторую функцию, которая будет выполнена в случае успеха</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Если вы все сделали верно, то при загрузке страницы должен выскакивать alert :) Иначе проверьте вывод консоли — нет ли там чего подобного на <code>Uncaught channelUrl must be under the current domain</code> ? Если есть — перепроверьте <code>channelUrl</code>. Иначе стоит проверить параметры приложения в панели управления на сайте.</p>
<h3 id="u0410_u0432_u0442_u043E_u0440_u0438_u0437_u0430_u0446_u0438_u044F"><a href="#u0410_u0432_u0442_u043E_u0440_u0438_u0437_u0430_u0446_u0438_u044F" class="headerlink" title="Авторизация"></a>Авторизация</h3><p>Изменим предыдущий код, а именно: создадим прототип функции <code>auth(data)</code> и укажем ее в <code>SE.init</code> как функцию, вызываемую при успешной инициализации:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params">data</span>) </span>&#123;&#125;</span><br><span class="line">...</span><br><span class="line">SE.init(&#123;</span><br><span class="line">    ...</span><br><span class="line">    complete: auth</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Теперь самое время писать авторизацию. Здесь тоже все просто:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SE.authenticate(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; alert(<span class="string">'Я получил доступ!'</span>); &#125;, <span class="comment">// Приложение авторизовало пользователя</span></span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;  alert(<span class="string">'Я не получил доступ :('</span>); &#125;, <span class="comment">// Приложение не авторизовало пользователя</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Этот код я поместил в тело <code>auth(data)</code>. Теперь, при первой загрузке страницы должно появиться всплывающее окно. В нем вам будут предложены две кнопки — на разрешение и запрет доступа для приложения:</p>
<p><img src="http://habrastorage.org/getpro/habr/post_images/f13/448/709/f13448709920a84c0913e44dbffdfd89.png" alt=""></p>
<p>Однако пока мы просто авторизируемся и ничего не делаем с полученными данными. А ведь в случае успеха нам будут отданы клиентские токены для дальнейшей работы. Давайте сохраним их где-нибудь. Например так — создадим некоторую глобальную переменную, которая будет хранить эти самые токены:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tokens = <span class="literal">null</span>;</span><br><span class="line">...</span><br><span class="line">SE.authenticate(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; alert(<span class="string">'Я получил доступ!'</span>); tokens = data; &#125;,</span><br><span class="line">    ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Теперь, когда мы умеем авторизировать пользователя, можно перейти к непосредственной работе с API.</p>
<h3 id="u041F_u043E_u043B_u0443_u0447_u0435_u043D_u0438_u0435__u0434_u0430_u043D_u043D_u044B_u0445__u043F_u0440_u043E_u0444_u0438_u043B_u044F"><a href="#u041F_u043E_u043B_u0443_u0447_u0435_u043D_u0438_u0435__u0434_u0430_u043D_u043D_u044B_u0445__u043F_u0440_u043E_u0444_u0438_u043B_u044F" class="headerlink" title="Получение данных профиля"></a>Получение данных профиля</h3><p>API возвращает нам ответ на запросы в формате JSON. Это значит, что данные, загруженные посредством JS, легко будут переведены из строкового формата в некоторую структуру. Запросы будут кросс-доменные, и потому я воспользуюсь jQuery.<br>Данные о пользователе будем получать вот здесь:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.stackexchange.com/2.2/me?site=[название сайта]</span></span><br></pre></td></tr></table></figure>
<p>Некоторые данные о пользователе (например рейтинг или значки) зависят от того, на каком сайте сети Stack Exchange запрашивается профиль. Данные, полученные с StackOverflow и с MathOverflow, могут различаться. Название сайта можно посмотреть в самой системе. Окей. Если просто запросить данные по ссылке, мы получим что-то вроде такого json’a:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"error_id"</span>:<span class="number">401</span>,<span class="string">"error_message"</span>:<span class="string">"This method requires an access_token"</span>,<span class="string">"error_name"</span>:<span class="string">"access_token_required"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>Все возможные ошибки можно глянуть <a href="http://api.stackexchange.com/docs/error-handling" target="_blank" rel="external">тут</a></p>
<p>А ведь же нам нужно указать токены доступа! Для этого к нашему адресу выше мы прицепим эти самые токены:<br><code>https://api.stackexchange.com/2.2/me?site=[название сайта]&amp;key=[ключ приложения key]&amp;access_token=[tokens.accessToken]&amp;callback=[method]</code></p>
<p>Здесь <code>tokens.accessToken</code> как раз ранее полученный в процессе авторизации ключ пользователя, а method — колбэк, который будет вызван в конце загрузки. Ответ будет примерно таким:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"badge_counts"</span>: &#123;</span><br><span class="line">                <span class="string">"bronze"</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">"silver"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">"gold"</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"account_id"</span>: <span class="number">2760756</span>,</span><br><span class="line">            <span class="string">"is_employee"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"last_modified_date"</span>: <span class="number">1396214504</span>,</span><br><span class="line">            <span class="string">"last_access_date"</span>: <span class="number">1396268249</span>,</span><br><span class="line">            <span class="string">"reputation_change_year"</span>: <span class="number">62</span>,</span><br><span class="line">            <span class="string">"reputation_change_quarter"</span>: <span class="number">62</span>,</span><br><span class="line">            <span class="string">"reputation_change_month"</span>: <span class="number">62</span>,</span><br><span class="line">            <span class="string">"reputation_change_week"</span>: <span class="number">55</span>,</span><br><span class="line">            <span class="string">"reputation_change_day"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">"reputation"</span>: <span class="number">63</span>,</span><br><span class="line">            <span class="string">"creation_date"</span>: <span class="number">1368447422</span>,</span><br><span class="line">            <span class="string">"user_type"</span>: <span class="string">"registered"</span>,</span><br><span class="line">            <span class="string">"user_id"</span>: <span class="number">2377708</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"location"</span>: <span class="string">"Belarus"</span>,</span><br><span class="line">            <span class="string">"link"</span>: <span class="string">"http://stackoverflow.com/users/2377708/alex-saskevich"</span>,</span><br><span class="line">            <span class="string">"display_name"</span>: <span class="string">"Alex Saskevich"</span>,</span><br><span class="line">            <span class="string">"profile_image"</span>: <span class="string">"http://i.stack.imgur.com/0Vz5q.jpg?s=128&amp;g=1"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"has_more"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"quota_max"</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">"quota_remaining"</span>: <span class="number">9905</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>С такими данными визуально сложно работать, и потому я создам callback функцию, которая будет рендерить полученную информацию в небольшую табличку:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderProfileData</span>(<span class="params">data</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = data.items[<span class="number">0</span>];</span><br><span class="line">    $(<span class="string">"#reputation"</span>).text(items.reputation);</span><br><span class="line">    $(<span class="string">"#login"</span>).text(items.display_name);</span><br><span class="line">    $(<span class="string">"#bronze_badges"</span>).text(items.badge_counts.bronze);</span><br><span class="line">    $(<span class="string">"#silver_badges"</span>).text(items.badge_counts.silver);</span><br><span class="line">    $(<span class="string">"#gold_badges"</span>).text(items.badge_counts.gold);</span><br><span class="line">    $(<span class="string">"#profile_image"</span>).attr(<span class="string">"src"</span>, items.profile_image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Саму информацию я получал через GET запросы примерно так: <code>$.get(&quot;https://api.stackexchange.com/2.2/me?site=stackoverflow&amp;key=YoUrAwEsOmEKey&amp;access_token=YoUrSecretToKEn&amp;callback=profile&quot;);</code></p>
<p>В итоге у меня получился такой результат:</p>
<p><img src="http://habrastorage.org/getpro/habr/post_images/687/aa6/b74/687aa6b74036bf07e26f55bde783b56e.png" alt=""></p>
<h3 id="u041F_u043E_u0441_u043B_u0435_u0434_u043D_u0438_u0435__u0443_u0432_u0435_u0434_u043E_u043C_u043B_u0435_u043D_u0438_u044F"><a href="#u041F_u043E_u0441_u043B_u0435_u0434_u043D_u0438_u0435__u0443_u0432_u0435_u0434_u043E_u043C_u043B_u0435_u043D_u0438_u044F" class="headerlink" title="Последние уведомления"></a>Последние уведомления</h3><p>Для того, чтобы наше приложение могло получать информацию о непрочитанных сообщениях, уведомлениях, ему нужно предоставить определенные права доступа. В случае с уведомлениями это <code>read_inbox</code>. Ставим его в блоке авторизации приложения:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SE.authenticate(&#123;</span><br><span class="line">    scope: [<span class="string">'read_inbox'</span>],</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Данные об уведомлениях мы получим вот тут: <code>https://api.stackexchange.com//2.2/notifications?pagesize=[число последних уведомлений]&amp;key=[ключ приложения]&amp;access_token=[токен доступа пользователя]&amp;callback=[callback-метод]</code></p>
<p>Мы можем не указывать число последних уведомлений, но тогда мы получим сразу все уведомления. Запрос выполняется аналогично предыдущему, ответ будет примерно таким:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"items"</span>: [</span><br><span class="line">            <span class="string">"site"</span>: &#123;</span><br><span class="line">                <span class="string">"styling"</span>: &#123;</span><br><span class="line">                    <span class="string">"tag_background_color"</span>: <span class="string">"#FFF"</span>,</span><br><span class="line">                    <span class="string">"tag_foreground_color"</span>: <span class="string">"#000"</span>,</span><br><span class="line">                    <span class="string">"link_color"</span>: <span class="string">"#0077CC"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"related_sites"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"relation"</span>: <span class="string">"meta"</span>,</span><br><span class="line">                        <span class="string">"api_site_parameter"</span>: <span class="string">"meta.reverseengineering"</span>,</span><br><span class="line">                        <span class="string">"site_url"</span>: <span class="string">"http://meta.reverseengineering.stackexchange.com"</span>,</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"Reverse Engineering Meta Stack Exchange"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"relation"</span>: <span class="string">"chat"</span>,</span><br><span class="line">                        <span class="string">"site_url"</span>: <span class="string">"http://chat.stackexchange.com"</span>,</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"Chat Stack Exchange"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"open_beta_date"</span>: <span class="number">1364774400</span>,</span><br><span class="line">                <span class="string">"closed_beta_date"</span>: <span class="number">1363651200</span>,</span><br><span class="line">                <span class="string">"site_state"</span>: <span class="string">"open_beta"</span>,</span><br><span class="line">                <span class="string">"twitter_account"</span>: <span class="string">"StackReverseEng"</span>,</span><br><span class="line">                <span class="string">"favicon_url"</span>: <span class="string">"http://cdn.sstatic.net/reverseengineering/img/favicon.ico"</span>,</span><br><span class="line">                <span class="string">"icon_url"</span>: <span class="string">"http://cdn.sstatic.net/reverseengineering/img/apple-touch-icon.png"</span>,</span><br><span class="line">                <span class="string">"audience"</span>: <span class="string">"researchers and developers who explore the principles of a system through analysis of its structure, function, and operation"</span>,</span><br><span class="line">                <span class="string">"site_url"</span>: <span class="string">"http://reverseengineering.stackexchange.com"</span>,</span><br><span class="line">                <span class="string">"api_site_parameter"</span>: <span class="string">"reverseengineering"</span>,</span><br><span class="line">                <span class="string">"logo_url"</span>: <span class="string">"http://cdn.sstatic.net/reverseengineering/img/logo.png"</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"Reverse Engineering"</span>,</span><br><span class="line">                <span class="string">"site_type"</span>: <span class="string">"main_site"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"is_unread"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"creation_date"</span>: <span class="number">1396197666</span>,</span><br><span class="line">            <span class="string">"notification_type"</span>: <span class="string">"badge_earned"</span>,</span><br><span class="line">            <span class="string">"body"</span>: <span class="string">"You've earned the "</span>Autobiographer<span class="string">" badge."</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"has_more"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"quota_max"</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">"quota_remaining"</span>: <span class="number">9994</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Как видим, в данном случае система сразу отдает нам массив уведомлений. И с ними достаточно просто работать:</p>
<figure class="highlight js"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderNotifications</span>(<span class="params">data</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = data.items;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">"&lt;center&gt;Последние уведомления&lt;/center&gt;&lt;br/&gt;"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> site = items[i].site.name;</span><br><span class="line">        <span class="keyword">var</span> icon = items[i].site.icon_url;</span><br><span class="line">        <span class="keyword">var</span> body = items[i].body;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"&lt;div class = 'item'&gt;&lt;img src = '"</span> + icon + <span class="string">"' height = '14px' /&gt; "</span> + site + <span class="string">": "</span> + body + <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">        html += str;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">"#notifications"</span>).html(html);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>В итоге страничка моего маленького приложения приобрела вот такой окончательный вид:</p>
<p><img src="http://habrastorage.org/getpro/habr/post_images/fff/f2a/096/ffff2a096c4e34e9d927f65f026284db.png" alt=""></p>
<p>А вот собственно фрейм, с которым можно “поиграть”:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/asaskevich/6F5kd/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="u0418__u0447_u0442_u043E__u0442_u0435_u043F_u0435_u0440_u044C_3F"><a href="#u0418__u0447_u0442_u043E__u0442_u0435_u043F_u0435_u0440_u044C_3F" class="headerlink" title="И что теперь?"></a>И что теперь?</h3><p>API сети Stack Exchange позволяет нам не только получать уведомления или данные профиля. Мы также можем получить вопросы, комментарии, теги, причем мы сможем также взаимодействовать с ними (добавлять вопросы, редактировать свои комментарии). Мы можем работать с профилем пользователя, событиями и статистикой.</p>
<p>Кстати о статистике — в панели управления приложением можно просмотреть статистику авторизаций и запросов в виде графиков. И да, стоит иметь ввиду, что число запросов, которое может сделать приложение к отдельной функции, ограничено десятью тысячами. Оставшееся число запросов пересылается нам вместе с JSON ответом в поле <code>«quota_remaining»</code>.</p>
<p>В документации также можно будет поэкспериментировать с запросами. Для этого StackExchange предлагает консоль, которую можно найти под описанием каждой функции.</p>
<h3 id="C_u0441_u044B_u043B_u043A_u0438"><a href="#C_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Cсылки"></a>Cсылки</h3><ul>
<li><a href="http://api.stackexchange.com/docs" target="_blank" rel="external">Документация</a></li>
<li><a href="http://stackapps.com/apps/oauth" target="_blank" rel="external">Панель управления приложениями</a></li>
<li><a href="http://jsfiddle.net/asaskevich/6F5kd/embedded/result/" target="_blank" rel="external">Приложение в действии</a></li>
</ul>
<h3 id="u041C_u0430_u043B_u0435_u043D_u044C_u043A_u0430_u044F__u0437_u0430_u043C_u0435_u0442_u043A_u0430"><a href="#u041C_u0430_u043B_u0435_u043D_u044C_u043A_u0430_u044F__u0437_u0430_u043C_u0435_u0442_u043A_u0430" class="headerlink" title="Маленькая заметка"></a>Маленькая заметка</h3><p>В оргиниале данная запись была опубликована <a href="http://habrahabr.ru/post/217753/" target="_blank" rel="external">тут</a></p>
]]></content>
    <summary type="html">
    <![CDATA[На примере StackExchange API рассмотрим общий принцип взаимодействия с API различных сервисов.]]>
    
    </summary>
    
      <category term="API" scheme="http://asaskevich.github.io/tags/API/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/tags/JavaScript/"/>
    
      <category term="StackExchange" scheme="http://asaskevich.github.io/tags/StackExchange/"/>
    
      <category term="JavaScript" scheme="http://asaskevich.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure: типы данных]]></title>
    <link href="http://asaskevich.github.io/2014/08/10/clojure--/"/>
    <id>http://asaskevich.github.io/2014/08/10/clojure--/</id>
    <published>2014-08-09T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:39.712Z</updated>
    <content type="html"><![CDATA[<p>После того, как я более-менее понял синтаксис языка, пришло время взяться за разбор типов данных (надо же информацию как-то хранить).<br><a id="more"></a></p>
<h3 id="u0421_u0442_u0440_u043E_u043A_u0438_2C__u0447_u0438_u0441_u043B_u0430_2C_nil__28_u0430__u0435_u0449_u0435__u043B_u043E_u0433_u0438_u0447_u0435_u0441_u043A_u0438_u0439__u0442_u0438_u043F_29"><a href="#u0421_u0442_u0440_u043E_u043A_u0438_2C__u0447_u0438_u0441_u043B_u0430_2C_nil__28_u0430__u0435_u0449_u0435__u043B_u043E_u0433_u0438_u0447_u0435_u0441_u043A_u0438_u0439__u0442_u0438_u043F_29" class="headerlink" title="Строки, числа, nil (а еще логический тип)"></a>Строки, числа, <code>nil</code> (а еще логический тип)</h3><p>Как и в любом нормальном языке, в Clojure присутствует все необходимое для хранения информации. Начну с числовых типов.</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; ; Целочисленный тип</span><br><span class="line">user=&gt; 10</span><br><span class="line">10</span><br><span class="line">user=&gt; ; Тип чисел с плавающей запятой</span><br><span class="line">user=&gt; 10.0</span><br><span class="line">10.0</span><br><span class="line">user=&gt; ; Тип вещественных дробей</span><br><span class="line">user=&gt; 10/7</span><br><span class="line">10/7</span><br><span class="line">user=&gt; ; Тип, взятый из java.math.BigDecimal</span><br><span class="line">user=&gt; 10M</span><br><span class="line">10M</span><br><span class="line">user=&gt; ; Тип BigInt</span><br><span class="line">user=&gt; 10N</span><br><span class="line">10N</span><br></pre></td></tr></table></figure>
<p>Воспользуемся оператором <code>class</code>, дабы узнать каждый тип:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (class 10M)</span><br><span class="line">java.math.BigDecimal</span><br><span class="line">user=&gt; (class 10/7)</span><br><span class="line">clojure.lang.Ratio</span><br><span class="line">user=&gt; (class 10.0)</span><br><span class="line">java.lang.Double</span><br><span class="line">user=&gt; (class 10)</span><br><span class="line">java.lang.Long</span><br><span class="line">user=&gt; (class 10N)</span><br><span class="line">clojure.lang.BigInt</span><br></pre></td></tr></table></figure>
<p>Прекрасно, не правда ли? Теперь взглянем на логический тип. Ему соответствуют два значения: <code>true false</code>. Однако существует один важный момент - <code>nil</code>, о котором мы говорили ранее, также относится к <code>false</code>.<br>Cтроки в языке мы рассматривали ранее. Это был некоторый текст, заключенный между двойными кавычками.</p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Немаловажным типом для нас является тип <code>map</code>, позволяющий хранить пары ключ-значение. Ключем и значением может быть любой тип, будь то строка, другой <code>map</code> или даже функция. Чтобы инициализировать карту, мы поступим следующим образом:</p>

<!--￼2-->


<p>Пары ключ-значение можно разделять запятыми, это видно по последним двум примерам. Получать значения из карты можно функциями <code>get</code> или <code>get-in</code>. Единственное отличие второй функции от первой в том, что она позволяет получать значения из вложенных карт:</p>

<!--￼3-->


<h3 id="u0412_u0435_u043A_u0442_u043E_u0440_u044B"><a href="#u0412_u0435_u043A_u0442_u043E_u0440_u044B" class="headerlink" title="Векторы"></a>Векторы</h3><p>С векторами все просто - он очень похож на обычный массив с нулевой индексацией. Не буду долго тянуть, потому вот вполне понятные примеры:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; [10 11 9 20 30]</span><br><span class="line">[10 11 9 20 30]</span><br><span class="line">user=&gt; ; Это нормально, хранить смешанные типы данных</span><br><span class="line">user=&gt; [10 10.0 10N 10M "TEN"]</span><br><span class="line">[10 10.0 10N 10M "TEN"]</span><br><span class="line">user=&gt; ; Функция get работает также, как и для карт</span><br><span class="line">user=&gt; (get [10 10.0 10N 10M "TEN"] 0)</span><br><span class="line">10</span><br><span class="line">user=&gt; (get [10 10.0 10N 10M "TEN"] 100)</span><br><span class="line">nil</span><br><span class="line">user=&gt; (get [10 10.0 10N 10M "TEN"] 100 "Nothing")</span><br><span class="line">"Nothing"</span><br><span class="line">user=&gt; ; Добавляет в конец новый(новые) элементы</span><br><span class="line">user=&gt; (conj [10 20] 30)</span><br><span class="line">[10 20 30]</span><br><span class="line">user=&gt; ; Забирает с конца, возвращая новый вектор</span><br><span class="line">user=&gt; (pop [10 20])</span><br><span class="line">[10]</span><br><span class="line">user=&gt; ; Смотрит последний элемент</span><br><span class="line">user=&gt; (peek [10 20])</span><br><span class="line">20</span><br><span class="line">user=&gt; (last [10 20])</span><br><span class="line">20</span><br><span class="line">user=&gt; (first [10 20])</span><br><span class="line">10</span><br><span class="line">user=&gt; ; nth работает как и get, НО! Если индекс выходит за пределы, будет сгенерировано любимое нами IndexOutOfBoundsException</span><br><span class="line">user=&gt; (nth [10 20] 1)</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<h3 id="u0421_u043F_u0438_u0441_u043A_u0438"><a href="#u0421_u043F_u0438_u0441_u043A_u0438" class="headerlink" title="Списки"></a>Списки</h3><p>О них тоже пока много сказать не могу. Скажу только вот что - как они объявляются и какие основные функции мы можем применять:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; `(10 20 30)</span><br><span class="line">(10 20 30)</span><br><span class="line">user=&gt; ; get здесь уже не работает</span><br><span class="line">user=&gt; (get `(10 20 30) 1)</span><br><span class="line">nil</span><br><span class="line">user=&gt; (nth `(10 20 30) 1)</span><br><span class="line">20</span><br><span class="line">user=&gt; ; Элемент добавляется в начало, а не конец</span><br><span class="line">user=&gt; (conj `(10 20 30) "A")</span><br><span class="line">("A" 10 20 30)</span><br><span class="line">user=&gt; ; А так мы можем узнать размер практически любой структуры данных, будь то строка, список, вектор или множество</span><br><span class="line">user=&gt; (count `(10 20 30))</span><br><span class="line">3</span><br><span class="line">user=&gt; (list 10 20 30)</span><br><span class="line">(10 20 30)</span><br></pre></td></tr></table></figure>
<h3 id="u041C_u043D_u043E_u0436_u0435_u0441_u0442_u0432_u043E"><a href="#u041C_u043D_u043E_u0436_u0435_u0441_u0442_u0432_u043E" class="headerlink" title="Множество"></a>Множество</h3><p>Думаю, вникнув в суть предыдущих структур данных, для множества хватит просто примеров:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (set [10 10 20 20 30])</span><br><span class="line">#&#123;20 30 10&#125;</span><br><span class="line">user=&gt; ; В отличие от обычного множества, хеш- и сортированное множество не удаляет дубликаты</span><br><span class="line">user=&gt; (sorted-set [10 10 20 20 30])</span><br><span class="line">#&#123;[10 10 20 20 30]&#125;</span><br><span class="line">user=&gt; (hash-set [10 10 20 20 30])</span><br><span class="line">#&#123;[10 10 20 20 30]&#125;</span><br><span class="line">user=&gt; (get (set [10 10 20 20 30]) 10)</span><br><span class="line">10</span><br><span class="line">user=&gt; (get (set [10 10 20 20 30]) 100)</span><br><span class="line">nil</span><br><span class="line">user=&gt; (count (set [10 10 20 20 30]))</span><br><span class="line">3</span><br><span class="line">user=&gt; (conj (set [10 10 20 20 30]) 100)</span><br><span class="line">#&#123;20 100 30 10&#125;</span><br><span class="line">user=&gt; (conj (set [10 10 20 20 30]) "a" "b" "A")</span><br><span class="line">#&#123;20 "a" "b" "A" 30 10&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Думаю, на этом пора заканчивать, все это вполне интересно, но следующей не менее крупной темой будет тема функций - создание, вызов, анонимные функции, макрофункции и прочие прелести.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://clojure.org/" target="_blank" rel="external">Clojure</a></li>
<li><a href="https://clojuredocs.herokuapp.com/" target="_blank" rel="external">Clojure Docs</a></li>
<li><a href="http://clojure.org/cheatsheet" target="_blank" rel="external">Clojure cheatsheet</a></li>
<li><a href="http://tryclj.com" target="_blank" rel="external">Try Clojure</a></li>
<li><a href="http://habrahabr.ru/post/173071/" target="_blank" rel="external">Почему стоит изучить Clojure? / Хабрахабр</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[В данной записке изучу основные структуры данных, предлагаемые Clojure.]]>
    
    </summary>
    
      <category term="Clojure" scheme="http://asaskevich.github.io/tags/Clojure/"/>
    
      <category term="Data Structures" scheme="http://asaskevich.github.io/tags/Data-Structures/"/>
    
      <category term="Functional" scheme="http://asaskevich.github.io/tags/Functional/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="Clojure" scheme="http://asaskevich.github.io/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure: второе знакомство]]></title>
    <link href="http://asaskevich.github.io/2014/08/09/clojure--/"/>
    <id>http://asaskevich.github.io/2014/08/09/clojure--/</id>
    <published>2014-08-08T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:45.894Z</updated>
    <content type="html"><![CDATA[<p>Продолжая знакомство с языком, я решил воспользоваться книгой <a href="http://www.braveclojure.com/" target="_blank" rel="external">“Clojure for the Brave and True”</a>. Удобно, понятно, самое главное - обилие примеров, простых и сложных. Что ж, продолжим статью <code>Clojure: первое знакомство</code>.<br><a id="more"></a></p>
<h3 id="u0423_u0441_u043B_u043E_u0432_u043D_u044B_u0439__u043E_u043F_u0435_u0440_u0430_u0442_u043E_u0440"><a href="#u0423_u0441_u043B_u043E_u0432_u043D_u044B_u0439__u043E_u043F_u0435_u0440_u0430_u0442_u043E_u0440" class="headerlink" title="Условный оператор"></a>Условный оператор</h3><p>Структура оператора вполне привычна для других языков, за исключением того, что скобки располагаются не в зоне условия, а вокруг всего блока оператора:</p>
<figure class="highlight clojure"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> условие</span><br><span class="line">  то-действие</span><br><span class="line">  иначе-действие</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure>
<p>Напишем маленький пример:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (if false "True" "False")</span><br><span class="line">"False"</span><br><span class="line">user=&gt; (if true "True" "False")</span><br><span class="line">"True"</span><br></pre></td></tr></table></figure>
<p>Единственное ограничение состоит в том, что здесь мы можем использовать только одно действие (написать сложную конструкцию из других операторов и функций не получится). Специально для этого в языке есть оператор <code>do</code></p>
<h3 id="u041E_u043F_u0435_u0440_u0430_u0442_u043E_u0440_do"><a href="#u041E_u043F_u0435_u0440_u0430_u0442_u043E_u0440_do" class="headerlink" title="Оператор do"></a>Оператор <code>do</code></h3><p>Оператор служит для объединения вызова нескольких команд вместе:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (do</span><br><span class="line">        (println "One")</span><br><span class="line">        (println "Two")</span><br><span class="line">        (println "Three")</span><br><span class="line">       )</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Three</span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p>Теперь мы можем переписать условие так, чтобы оно вывело, например результат умножения <code>5 * 5</code> и строку “Hi”:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (if (= 10 10)</span><br><span class="line">          (do</span><br><span class="line">                  (println (* 5 5))</span><br><span class="line">                  (println "Hi")</span><br><span class="line">          )</span><br><span class="line">          (println "Nothing")</span><br><span class="line">        )</span><br><span class="line">25</span><br><span class="line">Hi</span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p>Красота да и только!</p>
<h3 id="u041E_u043F_u0435_u0440_u0430_u0442_u043E_u0440_when"><a href="#u041E_u043F_u0435_u0440_u0430_u0442_u043E_u0440_when" class="headerlink" title="Оператор when"></a>Оператор <code>when</code></h3><p>Данный оператор как бы является комбинацией <code>if</code> и <code>do</code>, однако без формы <code>else</code>:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user=&gt;  (when (= 10 10)</span><br><span class="line">         (println (* 5 5))</span><br><span class="line">         (println (+ 5 5))</span><br><span class="line">        )</span><br><span class="line">25</span><br><span class="line">10</span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<h3 id="u041E_u0431_u044A_u044F_u0432_u043B_u0435_u043D_u0438_u0435__u043F_u0435_u0440_u0435_u043C_u0435_u043D_u043D_u044B_u0445"><a href="#u041E_u0431_u044A_u044F_u0432_u043B_u0435_u043D_u0438_u0435__u043F_u0435_u0440_u0435_u043C_u0435_u043D_u043D_u044B_u0445" class="headerlink" title="Объявление переменных"></a>Объявление переменных</h3><p>Вообще, большинство переменных в языке не совсем переменные - они неизменяемые. Однако это не помешает нам переприсваивать новое значение старой переменной:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (do</span><br><span class="line">        (def x 10)</span><br><span class="line">        (println x)</span><br><span class="line">        (def x "Some Text")</span><br><span class="line">        (println x)</span><br><span class="line">       )</span><br><span class="line">10</span><br><span class="line">Some Text</span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p>Мы объявили переменную <code>x</code>, присвоили ей значение <code>10</code>, а потом изменили ее значение и тип на строку. Можно сделать и так:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (def x 10)</span><br><span class="line">#'user/x</span><br><span class="line">user=&gt; (def x (+ x 1))</span><br><span class="line">#'user/x</span><br><span class="line">user=&gt; x</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<p>Объявили переменную и увеличили ее значение на единицу. Не исключаю, что есть более элегантная форма решения этого действия.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Рассмотрели, всего-то, операторы <code>if</code>, <code>def</code>, <code>do</code>, <code>when</code>. В книге, ссылка которой указана в самом начале, следующей темой будут структуры данных. Тема весьма крупная, потому я выделю под нее отдельную статью.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://clojure.org/" target="_blank" rel="external">Clojure</a></li>
<li><a href="https://clojuredocs.herokuapp.com/" target="_blank" rel="external">Clojure Docs</a></li>
<li><a href="http://clojure.org/cheatsheet" target="_blank" rel="external">Clojure cheatsheet</a></li>
<li><a href="http://tryclj.com" target="_blank" rel="external">Try Clojure</a></li>
<li><a href="http://habrahabr.ru/post/173071/" target="_blank" rel="external">Почему стоит изучить Clojure? / Хабрахабр</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Знакомство с Clojure продолжается, и сегодня в программе: if, do, when ...]]>
    
    </summary>
    
      <category term="Clojure" scheme="http://asaskevich.github.io/tags/Clojure/"/>
    
      <category term="Functional" scheme="http://asaskevich.github.io/tags/Functional/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="Clojure" scheme="http://asaskevich.github.io/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clojure: первое знакомство]]></title>
    <link href="http://asaskevich.github.io/2014/08/08/clojure--/"/>
    <id>http://asaskevich.github.io/2014/08/08/clojure--/</id>
    <published>2014-08-07T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:50.747Z</updated>
    <content type="html"><![CDATA[<p>Уж не знаю, по какой причине мне вдруг захотелось познакомиться с Clojure. До этого я практически не работал с функциональными языками (несколько маленких программ на Scala не учитываются). Однако рано или поздно приходится переступить через это. Почему я не выбрал Haskell или Erlang? Потому что Clojure крепко дружит с JVM, а это значит, что код на Java доступен в Clojure и наоборот. С другой стороны, почему не Scala? Scala не является абсолютно-функциональным языком, а это значит, что имея в руках функциональный и объектно-ориентированый язык программирования, рано или поздно в силу сложившихся привычек перейдешь на чистое ООП, используя его даже там, где язык предлагает более изящное решение на “функциональщине”.</p>
<a id="more"></a>
<h3 id="Hello_World"><a href="#Hello_World" class="headerlink" title="Hello World"></a>Hello World</h3><p>Начну с самого простого и традиционного - “Hello, World!”. Так как Clojure имеет некоторый Lisp-синтаксис, нам придется свыкнуться с мыслью о том, что нас ожидает великое множество скобочек:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (println "Hello, World")</span><br><span class="line">Hello, World</span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p>Что это за <code>nil</code>? Как я понял, листая примеры, это значит, что функция <code>println</code> ничего не вернула, а ничего - это <code>nil</code> или <code>null</code> в Java.<br>В целом, синтаксис вызова функции такой: <code>(func arg1 arg2 .. argN)</code>. Так, выше <code>func</code> это <code>println</code>, а единственный аргумент представлен в виде строки <code>&quot;Hello, World&quot;</code></p>
<h3 id="u0410_u0440_u0438_u0444_u043C_u0435_u0442_u0438_u043A_u0430"><a href="#u0410_u0440_u0438_u0444_u043C_u0435_u0442_u0438_u043A_u0430" class="headerlink" title="Арифметика"></a>Арифметика</h3><p>После этого я решил глянуть, как обстоят дела с примитивной арифметикой - сложение, вычитание, деление, умножение. И тут меня ждал сюрприз:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (+ 5 6)</span><br><span class="line">11</span><br><span class="line">user=&gt; (* 5 6)</span><br><span class="line">30</span><br><span class="line">user=&gt; (- 5 6)</span><br><span class="line">-1</span><br><span class="line">user=&gt; (/ 5 6)</span><br><span class="line">5/6</span><br></pre></td></tr></table></figure>
<p>Как видим, деление вернуло результат в виде рациональной дроби. А что, если попробовать так?</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (/ 6 5)</span><br><span class="line">6/5</span><br><span class="line">user=&gt; (/ 6 3)</span><br><span class="line">2</span><br><span class="line">user=&gt; (/ 6 2)</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>Если возможно провести целочисленное деление, язык делает это совершенно самостоятельно.<br>А как получить остаток от деления? В С или Java это <code>%</code>, но тут это уже не работает. Мысленно перебирая варианты, пробую такие названия функций: <code>mod</code> <code>rem</code>. И каково мое удивление, эти оба варианта работают и выполняют одно и то же действие. Сказать, зачем это сделано, я не могу, потому просто будем использовать то, что первое придет в голову:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (rem 6 2)</span><br><span class="line">0</span><br><span class="line">user=&gt; (rem 6 4)</span><br><span class="line">2</span><br><span class="line">user=&gt; (mod 6 1)</span><br><span class="line">0</span><br><span class="line">user=&gt; (mod 6 10)</span><br><span class="line">6</span><br><span class="line">user=&gt; (rem 6 10)</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h3 id="u0421_u0442_u0440_u043E_u043A_u0438"><a href="#u0421_u0442_u0440_u043E_u043A_u0438" class="headerlink" title="Строки"></a>Строки</h3><p>Строки в языке записываются также, как и в большинстве других языков - между двойных кавычек:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (str "Hello, " "World")</span><br><span class="line">"Hello, World"</span><br><span class="line">user=&gt; "Hello"</span><br><span class="line">"Hello"</span><br><span class="line">user=&gt; (str "Hello" 9)</span><br><span class="line">"Hello9"</span><br><span class="line">user=&gt; (str "Hello" [5 6 7])</span><br><span class="line">"Hello[5 6 7]"</span><br></pre></td></tr></table></figure>
<p>С поиском в строке вышло немного труднее - не имея представления о том, как нужно делать вызов функций из Java, я пытался получить <code>indexOf</code> из <code>java.lang.String</code>. Но, полазив по официальному сайту, нашел:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (.indexOf "Hello" "l")</span><br><span class="line">2</span><br><span class="line">user=&gt; (.lastIndexOf "Hello" "l")</span><br><span class="line">3</span><br><span class="line">user=&gt; (.substring "Hello" 1 3)</span><br><span class="line">"el"</span><br></pre></td></tr></table></figure>
<h3 id="u0414_u0440_u0443_u0433_u0438_u0435__u0442_u0438_u043F_u044B__u0434_u0430_u043D_u043D_u044B_u0445"><a href="#u0414_u0440_u0443_u0433_u0438_u0435__u0442_u0438_u043F_u044B__u0434_u0430_u043D_u043D_u044B_u0445" class="headerlink" title="Другие типы данных"></a>Другие типы данных</h3><p>Давайте еще глянем на такие вещи, как списки, множества, вектора и карты:</p>
<figure class="highlight"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; [1 2 3 4 5]</span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">user=&gt; &#123;:1 2 :3 4&#125;</span><br><span class="line">&#123;:1 2, :3 4&#125;</span><br><span class="line">user=&gt; (set '(1 2 3 3 4 4 4 5 5 5 5 5))</span><br><span class="line">#&#123;1 4 3 2 5&#125;</span><br><span class="line">user=&gt; '(\a \b \c \d)</span><br><span class="line">(\a \b \c \d)</span><br></pre></td></tr></table></figure>
<p>Язык предлагает поддержку различных типов этих структур - сортированные, хеш-, неупорядоченные.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Для первого достаточно, позже я рассмотрю управляющие операторы, функции, переменные. Конечно, можно писать и писать, однако мне кажется, что уже размер статьи стал несколько большим, потому продолжу знакомство в следующей статье.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://clojure.org/" target="_blank" rel="external">Clojure</a></li>
<li><a href="https://clojuredocs.herokuapp.com/" target="_blank" rel="external">Clojure Docs</a></li>
<li><a href="http://clojure.org/cheatsheet" target="_blank" rel="external">Clojure cheatsheet</a></li>
<li><a href="http://tryclj.com" target="_blank" rel="external">Try Clojure</a></li>
<li><a href="http://habrahabr.ru/post/173071/" target="_blank" rel="external">Почему стоит изучить Clojure? / Хабрахабр</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Рано или поздно приходится начать изучать функциональные языки, потому ...]]>
    
    </summary>
    
      <category term="Clojure" scheme="http://asaskevich.github.io/tags/Clojure/"/>
    
      <category term="Functional" scheme="http://asaskevich.github.io/tags/Functional/"/>
    
      <category term="Newbie" scheme="http://asaskevich.github.io/tags/Newbie/"/>
    
      <category term="Clojure" scheme="http://asaskevich.github.io/categories/Clojure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala: первые шаги в акторах]]></title>
    <link href="http://asaskevich.github.io/2014/08/06/scala----/"/>
    <id>http://asaskevich.github.io/2014/08/06/scala----/</id>
    <published>2014-08-05T21:00:00.000Z</published>
    <updated>2016-01-16T16:05:55.164Z</updated>
    <content type="html"><![CDATA[<p>Многопоточное программирование является немаловажным в данный момент. Практически любой современный язык знает такие понятия как потоки, процессы и тому подобное. К тематике многопоточного программирования также относятся так называемые акторы. Дабы не переговаривать некоторые вещи на новый лад, процитирую понятие актора с Википедии:</p>
<blockquote>
<p>В компьютерных науках модель акторов представляет собой математическую модель параллельных вычислений, которая трактует понятие «актор» как универсальный примитив параллельного численного расчёта: в ответ на сообщения, которые он получает, актор может принимать локальные решения, создавать новые акторы, посылать свои сообщения, а также устанавливать, как следует реагировать на последующие сообщения.</p>
</blockquote>
<p>Что ж, суть вполне понятна и проста. Попробуем написать набор из акторов, один из которых по запросу генерирует следующее число Фибоначчи, а другой запрашивает генерацию.</p>
<a id="more"></a>
<h3 id="u041F_u043E_u0434_u0433_u043E_u0442_u043E_u0432_u043A_u0430"><a href="#u041F_u043E_u0434_u0433_u043E_u0442_u043E_u0432_u043A_u0430" class="headerlink" title="Подготовка"></a>Подготовка</h3><p>Для начала импортируем необходимые классы:</p>
<figure class="highlight scala"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.actors.<span class="type">Actor</span></span><br><span class="line"><span class="keyword">import</span> scala.actors.<span class="type">Actor</span>._</span><br></pre></td></tr></table></figure>
<p>Затем опишем сообщения, которые могут пересылать акторы:</p>
<figure class="highlight scala"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Ready</span> <span class="title">//</span> <span class="title">По</span> <span class="title">этому</span> <span class="title">сообщению</span> <span class="title">актор</span> <span class="title">будет</span> <span class="title">запрашивать</span> <span class="title">новое</span> <span class="title">число</span></span><br><span class="line"></span><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Next</span> <span class="title">//</span> <span class="title">По</span> <span class="title">этому</span> <span class="title">сообщению</span> <span class="title">актор</span> <span class="title">будет</span> <span class="title">вычислять</span> <span class="title">новое</span> <span class="title">число</span></span><br><span class="line"></span><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Stop</span> <span class="title">//</span> <span class="title">По</span> <span class="title">этому</span> <span class="title">сообщению</span> <span class="title">актор</span> <span class="title">будет</span> <span class="title">завершать</span> <span class="title">свою</span> <span class="title">работу</span></span></span><br></pre></td></tr></table></figure>
<h3 id="u0410_u043A_u0442_u043E_u0440_Generator"><a href="#u0410_u043A_u0442_u043E_u0440_Generator" class="headerlink" title="Актор Generator"></a>Актор <code>Generator</code></h3><p>Данный актор будет вычислять новые числа Фибоначчи. Для того, чтобы это действительно был актор, нам нужно унаследовать его от <code>scala.actors.Actor</code> и реализовать функцию <code>def act() { .. }</code>. Внутри функция должна иметь конструкцию <code>receive { .. }</code>, которая и займется обработкой сообщений:</p>
<figure class="highlight scala"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Actor</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">act</span>(</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// Ждем новое сообщение</span></span><br><span class="line">      receive &#123;</span><br><span class="line">        <span class="comment">// Получили сообщение Next</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Next</span> =&gt; &#123;</span><br><span class="line">          println(a)</span><br><span class="line">          <span class="keyword">val</span> c = a + b</span><br><span class="line">          a = b</span><br><span class="line">          b = c</span><br><span class="line">          <span class="comment">// Ответили отправителю сообщением Ready</span></span><br><span class="line">          sender ! <span class="type">Ready</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Получили сообщение Stop</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Stop</span> =&gt; &#123;</span><br><span class="line">          println(<span class="string">"Enough!"</span>)</span><br><span class="line">          <span class="comment">// Ответили отправителю тем же и остановили актор</span></span><br><span class="line">          sender ! <span class="type">Stop</span></span><br><span class="line">          exit()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u0410_u043A_u0442_u043E_u0440_Sender"><a href="#u0410_u043A_u0442_u043E_u0440_Sender" class="headerlink" title="Актор Sender"></a>Актор <code>Sender</code></h3><p>Данный актор будет иметь схожую с предыдущим актором архитектуру, потому приведу просто его код с некоторыми пояснениями:</p>
<figure class="highlight scala"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span>(</span>calc: <span class="type">Actor</span>, maxCount: <span class="type">Int</span>) <span class="keyword">extends</span> <span class="type">Actor</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">act</span>(</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span></span><br><span class="line">    <span class="comment">// В конструкторе нам был передан другой актор, которому мы сразу отправим сообщение</span></span><br><span class="line">    calc ! <span class="type">Next</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      receive &#123;</span><br><span class="line">        <span class="comment">// Если актор-отправитель уже готов</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Ready</span> =&gt; &#123;</span><br><span class="line">          counter += <span class="number">1</span></span><br><span class="line">          <span class="comment">// Если посчитали слишком мало чисел Фибоначчи</span></span><br><span class="line">          <span class="keyword">if</span> (counter &lt; maxCount) &#123;</span><br><span class="line">            <span class="comment">// То просим следующее</span></span><br><span class="line">            calc ! <span class="type">Next</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Иначе останавливаем актор</span></span><br><span class="line">            calc ! <span class="type">Stop</span></span><br><span class="line">            exit()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u0417_u0430_u043F_u0443_u0441_u043A"><a href="#u0417_u0430_u043F_u0443_u0441_u043A" class="headerlink" title="Запуск"></a>Запуск</h3><p>Для всего этого нам понадобится только несколько строчек:</p>
<figure class="highlight scala"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Создаем экземпляры акторов</span></span><br><span class="line"><span class="keyword">val</span> generator = <span class="keyword">new</span> <span class="type">Generator</span></span><br><span class="line"><span class="keyword">val</span> sender = <span class="keyword">new</span> <span class="type">Sender</span>(generator, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//Запускаем их</span></span><br><span class="line">generator.start()</span><br><span class="line">sender.start()</span><br></pre></td></tr></table></figure>
<p>Также я попробовал запускать акторы в другом порядке - сначала <code>Sender</code>, а потом <code>Generator</code>, но даже так все отработало прекрасно.</p>
<h3 id="u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435"><a href="#u0417_u0430_u043A_u043B_u044E_u0447_u0435_u043D_u0438_u0435" class="headerlink" title="Заключение"></a>Заключение</h3><p>Все же Scala предлагает мощную поддержку многопоточности “из коробки”. Уже после того, как я “поиграл” с акторами, я выяснил, что текущая версия Scala имеет немного другую систему, которая разительно отличается от той, с которой я впервые познакомился. Также несомненно радует наличие таких вещей, как реакторы, расписания, каналы и др. В целом это во много раз лучше, чем создавать громоздкую конструкцию из потоков на чистой Java.</p>
<h3 id="u0421_u0441_u044B_u043B_u043A_u0438"><a href="#u0421_u0441_u044B_u043B_u043A_u0438" class="headerlink" title="Ссылки"></a>Ссылки</h3><ul>
<li><a href="http://www.scala-lang.org/old/node/242" target="_blank" rel="external">Scala Actors: A Short Tutorial</a></li>
<li><a href="http://docs.scala-lang.org/overviews/core/actors.html" target="_blank" rel="external">The Scala Actors API</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Акторы являются немаловажной частью Scala, потому в данной статье будет рассмотрено их использование.]]>
    
    </summary>
    
      <category term="Actors" scheme="http://asaskevich.github.io/tags/Actors/"/>
    
      <category term="Concurrency" scheme="http://asaskevich.github.io/tags/Concurrency/"/>
    
      <category term="Scala" scheme="http://asaskevich.github.io/tags/Scala/"/>
    
      <category term="Scala" scheme="http://asaskevich.github.io/categories/Scala/"/>
    
  </entry>
  
</feed>
